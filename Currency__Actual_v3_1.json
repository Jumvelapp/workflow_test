{
  "name": "Currency. Actual v3_1",
  "nodes": [
    {
      "parameters": {
        "url": "https://api.monobank.ua/bank/currency",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://monobank.ua/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {}
      },
      "id": "f8ee4165-565a-4f9c-a5bd-0ed0a8a9eb6b",
      "name": "Get Mono",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -220,
        140
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://izibank.com.ua/api/exchange/rates?type=card_kurs",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://https://izibank.com.ua/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {}
      },
      "id": "91458d5a-64a2-4483-b332-762faaaafc6a",
      "name": "Get Izi",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -220,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "const currencies = items.map(i => i.json);\n\n// –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏: –ø–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ (UTC+3, –ö–∏—ó–≤ –ª—ñ—Ç–Ω—ñ–π —á–∞—Å)\nconst now = new Date();\nnow.setUTCHours(now.getUTCHours() + 3);\nconst pad = n => n.toString().padStart(2, '0');\nconst dateStr = `${pad(now.getHours())}:${pad(now.getMinutes())} ${pad(now.getDate())}.${pad(now.getMonth() + 1)}.${now.getFullYear().toString().slice(-2)}`;\n\n// –ü—Ä–∞–ø–æ—Ä–∏\nconst flag = {\n  USD: 'üá∫üá∏',\n  EUR: 'üá™üá∫',\n};\n\n// –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –≤–∞–ª—é—Ç–∏\nconst usd = currencies.find(c => c.curr_short_name === \"USD\");\nconst eur = currencies.find(c => c.curr_short_name === \"EUR\");\n\nif (!usd || !eur) {\n  return [{ json: { error: \"Currency data not found\" } }];\n}\n\n// –§–æ—Ä–º–∞—Ç –∫—É—Ä—Å—É\nconst formatRate = (r) => parseFloat(r).toFixed(2);\n\n// –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\nlet text = `üè¶ *IziBank*\\n`;\n\n['USD', 'EUR'].forEach(curr => {\n  const buy = formatRate(currencies.find(c => c.curr_short_name === curr)?.bye);\n  const sell = formatRate(currencies.find(c => c.curr_short_name === curr)?.sale);\n  text += `${flag[curr]} ${curr}: ${buy} / ${sell} (${dateStr})\\n`;\n});\n\nreturn [{\n  json: {\n    text,\n    bank: \"Izi\"\n  }\n}];\n"
      },
      "id": "74f45529-e6f0-4d79-9796-1159db2ae6f3",
      "name": "IZI rates",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        400
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const allowedPairs = [\n  { a: 840, b: 980 },  // USD/UAH\n  { a: 978, b: 980 },  // EUR/UAH\n  { a: 978, b: 840 }   // EUR/USD\n];\n\n// –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ (UTC+3 ‚Äî –ö–∏—ó–≤, –ª—ñ—Ç–Ω—ñ–π —á–∞—Å)\nconst formatDate = (unixTime) => {\n  const dateObj = new Date(unixTime * 1000);\n  dateObj.setUTCHours(dateObj.getUTCHours() + 3);\n  const pad = (n) => n.toString().padStart(2, '0');\n  return `${pad(dateObj.getHours())}:${pad(dateObj.getMinutes())} ${pad(dateObj.getDate())}.${pad(dateObj.getMonth() + 1)}.${dateObj.getFullYear().toString().slice(-2)}`;\n};\n\n// –§–æ—Ä–º–∞—Ç –∫—É—Ä—Å—É\nconst formatRate = (r) => parseFloat(r).toFixed(2);\n\n// –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—É –≤–∞–ª—é—Ç–Ω—É –ø–∞—Ä—É\nconst findPair = (a, b) =>\n  items.find(i => i.json.currencyCodeA === a && i.json.currencyCodeB === b);\n\nconst usdUah = findPair(840, 980);\nconst eurUah = findPair(978, 980);\nconst eurUsd = findPair(978, 840);\n\nif (!usdUah || !eurUah || !eurUsd) {\n  return [{ json: { error: '–û–¥–Ω–∞ –∑ –≤–∞–ª—é—Ç–Ω–∏—Ö –ø–∞—Ä –≤—ñ–¥—Å—É—Ç–Ω—è.' } }];\n}\n\n// –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç\nconst text = `üè¶ *MonoBank*\nüá∫üá∏ USD: ${formatRate(usdUah.json.rateBuy)} / ${formatRate(usdUah.json.rateSell)} (${formatDate(usdUah.json.date)})\nüá™üá∫ EUR: ${formatRate(eurUah.json.rateBuy)} / ${formatRate(eurUah.json.rateSell)} (${formatDate(eurUah.json.date)})\nüí∂ EUR/USD: ${formatRate(eurUsd.json.rateBuy)} / ${formatRate(eurUsd.json.rateSell)} (${formatDate(eurUsd.json.date)})\n`;\n\nreturn [{\n  json: {\n    text,\n    bank: 'Mono'\n  }\n}];\n"
      },
      "id": "20e1716e-34b4-46b1-ad5a-119260eef618",
      "name": "Mono rates",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "id": "770a9e7b-c8ed-4d08-97b6-7cd12c953989",
      "name": "Merge Mono + Izi",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        220,
        200
      ]
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -440,
        140
      ],
      "id": "14537a34-e782-4611-bdc8-fae59f990638",
      "name": "Wait",
      "webhookId": "d401dd82-7a25-45d3-bb20-fd8b2193e457"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger - Start1').item.json.message.chat.id }}",
        "text": "={{ $json.text }}",
        "replyMarkup": "replyKeyboardRemove",
        "replyKeyboardRemove": {
          "remove_keyboard": true
        },
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -660,
        1600
      ],
      "id": "05b97e46-5156-465d-913a-3b9c68d2a78c",
      "name": "Telegram - pre-rates",
      "webhookId": "6eff7f17-d0a5-47ee-847d-ba8670e93594",
      "credentials": {
        "telegramApi": {
          "id": "TpVXEEuJ0oCUJSf4",
          "name": "Telegram account - Currency"
        }
      }
    },
    {
      "parameters": {
        "url": "https://bankalliance.ua/",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://bankalliance.ua/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        600
      ],
      "id": "ebde1473-1bf8-4437-b0f5-f6403683ec3c",
      "name": "Get bankalliance"
    },
    {
      "parameters": {
        "url": "https://gplus.globusbank.ua/api/v1/currency/exchange/rates",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://globusplus.ua/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        220,
        800
      ],
      "id": "3e979113-2a17-4ede-9cdf-c93b2b1d947a",
      "name": "Get bankglobus"
    },
    {
      "parameters": {
        "jsCode": "const html = $node[\"Get bankalliance\"].json.data;\n\nconst match = html.match(/<option[^>]*value=\"rate_33\"[^>]*>/);\n\nif (!match) {\n  throw new Error('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç <option value=\"rate_33\">');\n}\n\n// –í–∏—Ç—è–≥—É—î–º–æ data-buy —ñ data-sell\nconst buyRaw = match[0].match(/data-buy=\"([^\"]+)\"/)?.[1];\nconst sellRaw = match[0].match(/data-sell=\"([^\"]+)\"/)?.[1];\n\nif (!buyRaw || !sellRaw) {\n  throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞—Ç—Ä–∏–±—É—Ç–∏ data-buy –∞–±–æ data-sell');\n}\n\n// –†–æ–∑–∫–æ–¥—É—î–º–æ HTML entities (&quot;)\nconst decode = str => JSON.parse(str.replace(/&quot;/g, '\"'));\nconst buyRates = decode(buyRaw);\nconst sellRates = decode(sellRaw);\n\n// –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ +3h –ö–∏—ó–≤\nconst now = new Date();\nnow.setHours(now.getHours() + 3);\nconst h = String(now.getHours()).padStart(2, '0');\nconst m = String(now.getMinutes()).padStart(2, '0');\nconst d = String(now.getDate()).padStart(2, '0');\nconst mo = String(now.getMonth() + 1).padStart(2, '0');\nconst y = String(now.getFullYear()).toString().slice(-2);\nconst dateStr = `${h}:${m} ${d}.${mo}.${y}`;\n\n// –ü—Ä–∞–ø–æ—Ä–∏\nconst flag = {\n  USD: 'üá∫üá∏',\n  EUR: 'üá™üá∫',\n};\n\n// –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\nlet text = `üè¶ Bank Alliance\\n`;\n\n['USD', 'EUR'].forEach(curr => {\n  const buy = buyRates[curr]?.toFixed(2);\n  const sell = sellRates[curr]?.toFixed(2);\n  if (buy && sell) {\n    text += `${flag[curr]} ${curr}: ${buy} / ${sell} (${dateStr})\\n`;\n  }\n});\n\nreturn [{\n  json: {\n    text,\n    bank: \"Bank Alliance\"\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        600
      ],
      "id": "52b07b2f-0a81-484c-9bd6-9067d960d77b",
      "name": "BankAlliance rates",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// 1. –û—Ç—Ä–∏–º—É—î–º–æ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤\nconst rawData = $node[\"Get bankglobus\"].json.data;\nconst rates = typeof rawData === 'string' ? JSON.parse(rawData) : rawData;\n\n// 2. –í–∞–ª—é—Ç–Ω—ñ –ø–∞—Ä–∏, —è–∫—ñ –Ω–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å\nconst allowedPairs = {\n  '840-980': 'USD/UAH',\n  '978-980': 'EUR/UAH',\n  '978-840': 'EUR/USD',\n};\n\n// 3. –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Å—É (–Ω–∞—Ä–∞–∑—ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, –∞–ª–µ –∑–∞–ª–∏—à–∏–º–æ)\nconst now = new Date();\nnow.setUTCHours(now.getUTCHours() + 3); // UTC+3 –¥–ª—è –ö–∏—î–≤–∞ –≤–ª—ñ—Ç–∫—É\n\nconst pad = n => n.toString().padStart(2, '0');\nconst formattedDate = `${pad(now.getHours())}:${pad(now.getMinutes())} ${pad(now.getDate())}.${pad(now.getMonth() + 1)}.${now.getFullYear().toString().slice(-2)}`;\n\n// 3.1 –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –∫—É—Ä—Å—É\nconst formatDate = (isoString) => {\n  const date = new Date(isoString);\n  return `${pad(date.getHours())}:${pad(date.getMinutes())} ${pad(date.getDate())}.${pad(date.getMonth() + 1)}.${date.getFullYear().toString().slice(-2)}`;\n};\n\n// 4. –§–æ—Ä–º–∞—Ç –∫—É—Ä—Å—É\nconst formatRate = (r) => parseFloat(r).toFixed(2);\n\n// 5. –ü—Ä–∞–ø–æ—Ä–∏\nconst flags = {\n  'USD': 'üá∫üá∏',\n  'EUR': 'üá™üá∫',\n  'EUR/USD': 'üí∂'\n};\n\nlet entries = [];\n\nfor (const item of rates) {\n  const from = item.Currency?.Id;\n  const to = item.EquivalentCurrency?.Id;\n  const code = `${from}-${to}`;\n  const pairLabel = allowedPairs[code];\n\n  if (!pairLabel) continue;\n\n  const label = pairLabel === 'EUR/USD' ? 'EUR/USD' : item.Currency.Code;\n  const flag = flags[label];\n\n  entries.push({\n    label,\n    flag,\n    buy: formatRate(item.BuyRate),\n    sell: formatRate(item.SellRate),\n    date: formatDate(item.Date) // <--- —Ç–µ–ø–µ—Ä –ø—Ä–∞—Ü—é—î\n  });\n}\n\n// 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞\nif (entries.length === 0) {\n  return [{ json: { error: '–î–∞–Ω—ñ –ø—Ä–æ –∫—É—Ä—Å–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.' } }];\n}\n\n// 7. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\nlet text = `üè¶ *GlobusPlus*\\n`;\nfor (const e of entries) {\n  text += `${e.flag} ${e.label}: ${e.buy} / ${e.sell} (${e.date})\\n`;\n}\n\nreturn [{ json: { text, bank: 'GlobusPlus' } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        800
      ],
      "id": "269a003b-0c9c-45c8-bf2b-c7a9f4e729af",
      "name": "BankGlobus rates",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://a-bank.com.ua/backend/api/v1/rates",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://a-bank.com.ua/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        220,
        1000
      ],
      "id": "7381c4b8-db0c-42bc-a551-3cd930476c8c",
      "name": "Get A-Bank"
    },
    {
      "parameters": {
        "jsCode": "// Get data from the HTTP request\nconst input = items[0].json.data;\nif (!input || !Array.isArray(input.processing)) {\n  return [{ json: { error: \"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –º–∞—Å–∏–≤ processing —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ A-Bank\" } }];\n}\n\n// Currency flags\nconst flags = {\n  USD: 'üá∫üá∏',\n  EUR: 'üá™üá∫',\n  'EUR/USD': 'üí∂/üá∫üá∏'\n};\n\n// Relevant currency pairs to extract\nconst relevantPairs = [\n  { ccyA: 'USD', ccyB: 'UAH', label: 'USD' },\n  { ccyA: 'EUR', ccyB: 'UAH', label: 'EUR' },\n  { ccyA: 'EUR', ccyB: 'USD', label: 'EUR/USD' }\n];\n\n// Format time to UTC+3\nconst now = new Date();\nnow.setUTCHours(now.getUTCHours() + 3);\nconst pad = n => n.toString().padStart(2, '0');\nconst formattedDate = `${pad(now.getHours())}:${pad(now.getMinutes())} ${pad(now.getDate())}.${pad(now.getMonth() + 1)}.${now.getFullYear().toString().slice(-2)}`;\n\n// Helper function to format rates with two decimal places\nconst formatCurrency = (value) => {\n  if (typeof value === 'string') {\n    value = parseFloat(value);\n  }\n  if (isNaN(value)) {\n    return 'N/A';\n  }\n  // Keep exactly 2 decimal places\n  return value.toFixed(2);\n};\n\n// Collect currency rates\nconst entries = [];\nconst raw = input.processing;\nfor (const pair of relevantPairs) {\n  const matchA = raw.find(r => r.ccyA === pair.ccyA && r.ccyB === pair.ccyB);\n  const matchB = raw.find(r => r.ccyA === pair.ccyB && r.ccyB === pair.ccyA);\n  \n  if (matchA && matchB) {\n    const buy = formatCurrency(matchA.rateB);  // –∫—É–ø—ñ–≤–ª—è\n    const sell = formatCurrency(matchB.rateA); // –ø—Ä–æ–¥–∞–∂\n    \n    entries.push({\n      currency: pair.label,\n      flag: flags[pair.label],\n      buy,\n      sell\n    });\n  }\n}\n\n// Validation check\nif (entries.length === 0) {\n  return [{ json: { error: \"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –≤–∞–ª—é—Ç–Ω—ñ –ø–∞—Ä–∏ –≤ A-Bank.\" } }];\n}\n\n// Format message\nlet text = `üè¶ A-Bank\\n`;\nfor (const e of entries) {\n  text += `${e.flag} ${e.currency}: ${e.buy} / ${e.sell} (${formattedDate})\\n`;\n}\n\n// Return formatted data with consistent structure\nreturn [{ json: { text, bank: \"A-Bank\" } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        660,
        1000
      ],
      "id": "941da4aa-fa87-456b-8898-c59490b0d857",
      "name": "A-Bank rates",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "id": "49f00e4e-da0e-4bc0-9990-e2e9bfa994b1",
      "name": "Merge Mono + Izi + Alliance + Globus +Abank",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        880,
        500
      ]
    },
    {
      "parameters": {},
      "id": "f4ac4391-1076-4e8b-a85f-b6953efe37bf",
      "name": "Merge Mono + Izi + Alliance + Globus",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        660,
        400
      ]
    },
    {
      "parameters": {},
      "id": "98c55890-e6b8-4790-8ea0-95ad7b070eec",
      "name": "Merge Mono + Izi + Alliance",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        440,
        300
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "407c756f-ae7f-4670-8e0b-a450df5f624d",
              "name": "data",
              "value": "={{ $json.data }}",
              "type": "object"
            }
          ]
        },
        "includeOtherFields": true,
        "include": "=except",
        "excludeFields": "\"processing\":[{\"rateA\":1,\"rateB\":46.4,\"ccyA\":\"EUR\",\"ccyB\":\"UAH\"},{\"rateA\":1,\"rateB\":1.13,\"ccyA\":\"EUR\",\"ccyB\":\"USD\"},{\"rateA\":41.8,\"rateB\":1,\"ccyA\":\"UAH\",\"ccyB\":\"USD\"},{\"rateA\":47.4,\"rateB\":1,\"ccyA\":\"UAH\",\"ccyB\":\"EUR\"},{\"rateA\":1,\"rateB\":41.2,\"ccyA\":\"USD\",\"ccyB\":\"UAH\"},{\"rateA\":1.15,\"rateB\":1,\"ccyA\":\"USD\",\"ccyB\":\"EUR\"}],",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        440,
        1000
      ],
      "id": "a3ece286-7b8b-40b3-9c64-8b9a1e8d18a5",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "608c8b2c-3d5c-440c-af81-0e12aa2d999f",
      "name": "Telegram Trigger - Start1",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1,
      "position": [
        -1980,
        1600
      ],
      "webhookId": "3f121f07-fc8b-44f5-a5f8-abf882049382",
      "credentials": {
        "telegramApi": {
          "id": "TpVXEEuJ0oCUJSf4",
          "name": "Telegram account - Currency"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json[\"message\"][\"chat\"][\"id\"] }}",
        "text": "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∫—É—Ä—Å–∏ –æ–±–º—ñ–Ω—É –≤–∞–ª—é—Ç –≤–∞–ª—é—Ç üìä",
        "replyMarkup": "replyKeyboard",
        "replyKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "üìä –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç –æ–Ω–ª–∞–π–Ω",
                    "additionalFields": {}
                  }
                ]
              }
            }
          ]
        },
        "replyKeyboardOptions": {
          "resize_keyboard": true
        },
        "additionalFields": {}
      },
      "id": "31787398-3611-41a6-a211-21dc5c706f3e",
      "name": "Send Welcome With Keyboard",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        -1320,
        1600
      ],
      "webhookId": "ca39473f-e6ae-44af-9cb2-4532a9fe7db5",
      "credentials": {
        "telegramApi": {
          "id": "TpVXEEuJ0oCUJSf4",
          "name": "Telegram account - Currency"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.result.text }}",
              "value2": "={{ $json.result.text }}"
            }
          ]
        }
      },
      "name": "IF Button Pressed",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1100,
        1600
      ],
      "id": "aa0b1b74-d8f9-4fad-9913-34908c12a140"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        0,
        200
      ],
      "id": "1ea2f592-0e68-40f5-a7ab-d68f775f5d2c",
      "name": "Wait1",
      "webhookId": "a1d7f2f6-c5b3-48cf-a67d-72bc1a475b56"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "76af5ffa-84d4-460b-8a75-31684d47fa0a",
              "name": "message.chat.id",
              "value": "={{ $json.message.chat.id }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1760,
        1600
      ],
      "id": "c4d9e16f-80f0-4d2e-b0ba-5f4c21a7c791",
      "name": "Set chat ID for last tg node01"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json[\"message\"]",
              "value2": "üìä –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç –æ–±–º—ñ–Ω—É –æ–Ω–ª–∞–π–Ω"
            }
          ]
        }
      },
      "id": "242a2032-240f-4913-bdc1-4b93978f1fa4",
      "name": "If Get Rates Button",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1540,
        1600
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        4340,
        1520
      ],
      "id": "f020f159-c540-43cf-9661-04dd7aad8f4a",
      "name": "Telegram - rates",
      "webhookId": "307b757c-a2d9-4182-b11e-4e33e2df0417",
      "credentials": {
        "telegramApi": {
          "id": "TpVXEEuJ0oCUJSf4",
          "name": "Telegram account - Currency"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"text\": \"üì≤ –û—Ç—Ä–∏–º–∞–ª–∏ –í–∞—à –∑–∞–ø–∏—Ç —â–æ–¥–æ –∫—É—Ä—Å—ñ–≤ –æ–±–º—ñ–Ω—É –≤–∞–ª—é—Ç–∏ –≤ –¥–æ–¥–∞—Ç–∫–∞—Ö –ë–∞–Ω–∫—ñ–≤. –û–ø—Ä–∞—Ü—å–æ–≤—É—î–º–æ... ‚è≥‚ö°\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -880,
        1600
      ],
      "id": "4977640e-57d7-404a-b376-2df81b9e56f1",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "const fallbackMessage = (name) => `üö´ ${name}\\n–°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö.`;\n\n// –ü–æ—Ä—è–¥–æ–∫ –±–∞–Ω–∫—ñ–≤ —É —Ñ—ñ–Ω–∞–ª—å–Ω–æ–º—É —Ç–µ–∫—Å—Ç—ñ\nconst banks = [\n  { key: 'Mono', name: 'MonoBank' },\n  { key: 'Izi', name: 'IziBank' },\n  { key: 'Bank Alliance', name: 'Bank Alliance' },\n  { key: 'GlobusPlus', name: 'GlobusPlus' },\n  { key: 'A-Bank', name: 'A-Bank' },\n  { key: 'Winbank', name: 'Winbank' },\n  { key: 'AP Bank', name: 'AP Bank' },\n  { key: 'UnexBank', name: 'UnexBank' },\n  { key: 'KredytDnipro', name: '–ö—Ä–µ–¥–∏—Ç –î–Ω—ñ–ø—Ä–æ –ë–∞–Ω–∫' },\n  { key: 'Privat24', name: 'Privat24' },\n  { key: 'ProCredit Bank', name: 'ProCredit Bank' },\n  { key: 'OTP Bank', name: 'OTP Bank' },\n  { key: 'CreditAgricole', name: 'CreditAgricole' },\n  { key: 'UkrSibBank', name: 'UkrSibBank' },\n  { key: 'AccordBank', name: 'AccordBank' }\n];\n\n// –§—É–Ω–∫—Ü—ñ—è –ø–∞—Ä—Å–∏–Ω–≥—É –∫—É—Ä—Å—ñ–≤ –∑ —Ç–µ–∫—Å—Ç—É\nfunction parseRates(text) {\n  const rates = {\n    USD: { buy: null, sell: null },\n    EUR: { buy: null, sell: null }\n  };\n\n  // –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ —Ç–∏–ø string\n  if (typeof text !== 'string') return rates;\n\n  const usdMatch = text.match(/USD[^:]*: ([\\d.]+) \\/ ([\\d.]+)/);\n  if (usdMatch) {\n    rates.USD.buy = parseFloat(usdMatch[1]);\n    rates.USD.sell = parseFloat(usdMatch[2]);\n  }\n\n  const eurMatch = text.match(/EUR[^:]*: ([\\d.]+) \\/ ([\\d.]+)/);\n  if (eurMatch) {\n    rates.EUR.buy = parseFloat(eurMatch[1]);\n    rates.EUR.sell = parseFloat(eurMatch[2]);\n  }\n\n  return rates;\n}\n\n// –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö —ñ –ø–æ—à—É–∫ –∫—Ä–∞—â–∏—Ö –∫—É—Ä—Å—ñ–≤\nconst resultMap = {};\nconst allRates = {\n  USD: { maxBuy: null, minSell: null, maxBuyBank: '', minSellBank: '' },\n  EUR: { maxBuy: null, minSell: null, maxBuyBank: '', minSellBank: '' }\n};\n\nfor (const item of items) {\n  const bank = item.json.bank;\n  const text = String(item.json.text || item.json.message || '');\n\n  resultMap[bank] = text;\n  const rates = parseRates(text);\n\n  if (rates.USD.buy && (!allRates.USD.maxBuy || rates.USD.buy > allRates.USD.maxBuy)) {\n    allRates.USD.maxBuy = rates.USD.buy;\n    allRates.USD.maxBuyBank = bank;\n  }\n  if (rates.USD.sell && (!allRates.USD.minSell || rates.USD.sell < allRates.USD.minSell)) {\n    allRates.USD.minSell = rates.USD.sell;\n    allRates.USD.minSellBank = bank;\n  }\n\n  if (rates.EUR.buy && (!allRates.EUR.maxBuy || rates.EUR.buy > allRates.EUR.maxBuy)) {\n    allRates.EUR.maxBuy = rates.EUR.buy;\n    allRates.EUR.maxBuyBank = bank;\n  }\n  if (rates.EUR.sell && (!allRates.EUR.minSell || rates.EUR.sell < allRates.EUR.minSell)) {\n    allRates.EUR.minSell = rates.EUR.sell;\n    allRates.EUR.minSellBank = bank;\n  }\n}\n\n// –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è üî•\nfunction highlightBestRate(text, currency, type, bestValue) {\n  const regex = new RegExp(`(${currency}[^:]*: )(\\\\d+\\\\.\\\\d+)( \\\\/ )(\\\\d+\\\\.\\\\d+)`);\n\n  return text.replace(regex, (match, prefix, buy, sep, sell) => {\n    if (type === 'buy' && parseFloat(buy) === bestValue) {\n      return `${prefix}üî•${buy}${sep}${sell}`;\n    } else if (type === 'sell' && parseFloat(sell) === bestValue) {\n      return `${prefix}${buy}${sep}üî•${sell}`;\n    }\n    return match;\n  });\n}\n\n// –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É\nlet finalText = '*–ö—É—Ä—Å–∏ –æ–±–º—ñ–Ω—É –≤–∞–ª—é—Ç –æ–Ω–ª–∞–π–Ω –≤ –¥–æ–¥–∞—Ç–∫–∞—Ö –±–∞–Ω–∫—ñ–≤*\\n\\n';\n\nfor (const bank of banks) {\n  if (resultMap[bank.key]) {\n    let bankText = resultMap[bank.key];\n\n    if (allRates.USD.maxBuyBank === bank.key) {\n      bankText = highlightBestRate(bankText, 'USD', 'buy', allRates.USD.maxBuy);\n    }\n    if (allRates.USD.minSellBank === bank.key) {\n      bankText = highlightBestRate(bankText, 'USD', 'sell', allRates.USD.minSell);\n    }\n    if (allRates.EUR.maxBuyBank === bank.key) {\n      bankText = highlightBestRate(bankText, 'EUR', 'buy', allRates.EUR.maxBuy);\n    }\n    if (allRates.EUR.minSellBank === bank.key) {\n      bankText = highlightBestRate(bankText, 'EUR', 'sell', allRates.EUR.minSell);\n    }\n\n    finalText += `${bankText.trim()}\\n\\n`;\n  } else {\n    finalText += `${fallbackMessage(bank.name)}\\n\\n`;\n  }\n}\n\n// –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫\nfinalText += 'üìä *–ù–∞–π–∫—Ä–∞—â—ñ –∫—É—Ä—Å–∏:*\\n';\nfinalText += `üá∫üá∏ USD –∫—É–ø—ñ–≤–ª—è: üî• ${allRates.USD.maxBuy} (${allRates.USD.maxBuyBank})\\n`;\nfinalText += `üá∫üá∏ USD –ø—Ä–æ–¥–∞–∂: üî• ${allRates.USD.minSell} (${allRates.USD.minSellBank})\\n`;\nfinalText += `üá™üá∫ EUR –∫—É–ø—ñ–≤–ª—è: üî• ${allRates.EUR.maxBuy} (${allRates.EUR.maxBuyBank})\\n`;\nfinalText += `üá™üá∫ EUR –ø—Ä–æ–¥–∞–∂: üî• ${allRates.EUR.minSell} (${allRates.EUR.minSellBank})\\n`;\n\nreturn [{ json: { text: finalText.trim() } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3840,
        1520
      ],
      "id": "74227ef7-067e-45c3-a3de-b2e822392f32",
      "name": "Code"
    }
  ],
  "pinData": {},
  "connections": {
    "Get Mono": {
      "main": [
        [
          {
            "node": "Mono rates",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Izi": {
      "main": [
        [
          {
            "node": "IZI rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mono rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IZI rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Mono + Izi": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Get Mono",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram - pre-rates": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Izi",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get bankalliance",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get bankglobus",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get A-Bank",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get bankalliance": {
      "main": [
        [
          {
            "node": "BankAlliance rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BankAlliance rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get bankglobus": {
      "main": [
        [
          {
            "node": "BankGlobus rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BankGlobus rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get A-Bank": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Mono + Izi + Alliance + Globus": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Mono + Izi + Alliance": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "A-Bank rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Mono + Izi + Alliance + Globus +Abank": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "A-Bank rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger - Start1": {
      "main": [
        [
          {
            "node": "Set chat ID for last tg node01",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Welcome With Keyboard": {
      "main": [
        [
          {
            "node": "IF Button Pressed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Button Pressed": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Get Mono",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set chat ID for last tg node01": {
      "main": [
        [
          {
            "node": "If Get Rates Button",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Get Rates Button": {
      "main": [
        [],
        [
          {
            "node": "Send Welcome With Keyboard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Telegram - pre-rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Telegram - rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "670df9a9-58e1-4e97-b73e-8224d65aa658",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "522de75d2ab2fc048d935d1b5d5e1541f54c61ca8b20e92c9ab056b14c65ad8b"
  },
  "id": "w6dwwmCbQGqSquji",
  "tags": []
}