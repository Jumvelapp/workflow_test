{
  "name": "Currency. Actual v3_1",
  "nodes": [
    {
      "parameters": {
        "url": "https://api.monobank.ua/bank/currency",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://monobank.ua/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {}
      },
      "id": "f8ee4165-565a-4f9c-a5bd-0ed0a8a9eb6b",
      "name": "Get Mono",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -220,
        140
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://izibank.com.ua/api/exchange/rates?type=card_kurs",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://https://izibank.com.ua/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {}
      },
      "id": "91458d5a-64a2-4483-b332-762faaaafc6a",
      "name": "Get Izi",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -220,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "const currencies = items.map(i => i.json);\n\n// –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏: –ø–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ (UTC+3, –ö–∏—ó–≤ –ª—ñ—Ç–Ω—ñ–π —á–∞—Å)\nconst now = new Date();\nnow.setUTCHours(now.getUTCHours() + 3);\nconst pad = n => n.toString().padStart(2, '0');\nconst dateStr = `${pad(now.getHours())}:${pad(now.getMinutes())} ${pad(now.getDate())}.${pad(now.getMonth() + 1)}.${now.getFullYear().toString().slice(-2)}`;\n\n// –ü—Ä–∞–ø–æ—Ä–∏\nconst flag = {\n  USD: 'üá∫üá∏',\n  EUR: 'üá™üá∫',\n};\n\n// –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –≤–∞–ª—é—Ç–∏\nconst usd = currencies.find(c => c.curr_short_name === \"USD\");\nconst eur = currencies.find(c => c.curr_short_name === \"EUR\");\n\nif (!usd || !eur) {\n  return [{ json: { error: \"Currency data not found\" } }];\n}\n\n// –§–æ—Ä–º–∞—Ç –∫—É—Ä—Å—É\nconst formatRate = (r) => parseFloat(r).toFixed(2);\n\n// –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\nlet text = `üè¶ *IziBank*\\n`;\n\n['USD', 'EUR'].forEach(curr => {\n  const buy = formatRate(currencies.find(c => c.curr_short_name === curr)?.bye);\n  const sell = formatRate(currencies.find(c => c.curr_short_name === curr)?.sale);\n  text += `${flag[curr]} ${curr}: ${buy} / ${sell} (${dateStr})\\n`;\n});\n\nreturn [{\n  json: {\n    text,\n    bank: \"Izi\"\n  }\n}];\n"
      },
      "id": "74f45529-e6f0-4d79-9796-1159db2ae6f3",
      "name": "IZI rates",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        400
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const allowedPairs = [\n  { a: 840, b: 980 },  // USD/UAH\n  { a: 978, b: 980 },  // EUR/UAH\n  { a: 978, b: 840 }   // EUR/USD\n];\n\n// –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ (UTC+3 ‚Äî –ö–∏—ó–≤, –ª—ñ—Ç–Ω—ñ–π —á–∞—Å)\nconst formatDate = (unixTime) => {\n  const dateObj = new Date(unixTime * 1000);\n  dateObj.setUTCHours(dateObj.getUTCHours() + 3);\n  const pad = (n) => n.toString().padStart(2, '0');\n  return `${pad(dateObj.getHours())}:${pad(dateObj.getMinutes())} ${pad(dateObj.getDate())}.${pad(dateObj.getMonth() + 1)}.${dateObj.getFullYear().toString().slice(-2)}`;\n};\n\n// –§–æ—Ä–º–∞—Ç –∫—É—Ä—Å—É\nconst formatRate = (r) => parseFloat(r).toFixed(2);\n\n// –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—É –≤–∞–ª—é—Ç–Ω—É –ø–∞—Ä—É\nconst findPair = (a, b) =>\n  items.find(i => i.json.currencyCodeA === a && i.json.currencyCodeB === b);\n\nconst usdUah = findPair(840, 980);\nconst eurUah = findPair(978, 980);\nconst eurUsd = findPair(978, 840);\n\nif (!usdUah || !eurUah || !eurUsd) {\n  return [{ json: { error: '–û–¥–Ω–∞ –∑ –≤–∞–ª—é—Ç–Ω–∏—Ö –ø–∞—Ä –≤—ñ–¥—Å—É—Ç–Ω—è.' } }];\n}\n\n// –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç\nconst text = `üè¶ *MonoBank*\nüá∫üá∏ USD: ${formatRate(usdUah.json.rateBuy)} / ${formatRate(usdUah.json.rateSell)} (${formatDate(usdUah.json.date)})\nüá™üá∫ EUR: ${formatRate(eurUah.json.rateBuy)} / ${formatRate(eurUah.json.rateSell)} (${formatDate(eurUah.json.date)})\nüí∂ EUR/USD: ${formatRate(eurUsd.json.rateBuy)} / ${formatRate(eurUsd.json.rateSell)} (${formatDate(eurUsd.json.date)})\n`;\n\nreturn [{\n  json: {\n    text,\n    bank: 'Mono'\n  }\n}];\n"
      },
      "id": "20e1716e-34b4-46b1-ad5a-119260eef618",
      "name": "Mono rates",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "id": "770a9e7b-c8ed-4d08-97b6-7cd12c953989",
      "name": "Merge Mono + Izi",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        220,
        200
      ]
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -440,
        140
      ],
      "id": "14537a34-e782-4611-bdc8-fae59f990638",
      "name": "Wait",
      "webhookId": "d401dd82-7a25-45d3-bb20-fd8b2193e457"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger - Start1').item.json.message.chat.id }}",
        "text": "={{ $json.text }}",
        "replyMarkup": "replyKeyboardRemove",
        "replyKeyboardRemove": {
          "remove_keyboard": true
        },
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -660,
        1600
      ],
      "id": "05b97e46-5156-465d-913a-3b9c68d2a78c",
      "name": "Telegram - pre-rates",
      "webhookId": "6eff7f17-d0a5-47ee-847d-ba8670e93594",
      "credentials": {
        "telegramApi": {
          "id": "TpVXEEuJ0oCUJSf4",
          "name": "Telegram account - Currency"
        }
      }
    },
    {
      "parameters": {
        "url": "https://bankalliance.ua/",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://bankalliance.ua/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        600
      ],
      "id": "ebde1473-1bf8-4437-b0f5-f6403683ec3c",
      "name": "Get bankalliance"
    },
    {
      "parameters": {
        "url": "https://gplus.globusbank.ua/api/v1/currency/exchange/rates",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://globusplus.ua/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        220,
        800
      ],
      "id": "3e979113-2a17-4ede-9cdf-c93b2b1d947a",
      "name": "Get bankglobus"
    },
    {
      "parameters": {
        "jsCode": "const html = $node[\"Get bankalliance\"].json.data;\n\nconst match = html.match(/<option[^>]*value=\"rate_33\"[^>]*>/);\n\nif (!match) {\n  throw new Error('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç <option value=\"rate_33\">');\n}\n\n// –í–∏—Ç—è–≥—É—î–º–æ data-buy —ñ data-sell\nconst buyRaw = match[0].match(/data-buy=\"([^\"]+)\"/)?.[1];\nconst sellRaw = match[0].match(/data-sell=\"([^\"]+)\"/)?.[1];\n\nif (!buyRaw || !sellRaw) {\n  throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞—Ç—Ä–∏–±—É—Ç–∏ data-buy –∞–±–æ data-sell');\n}\n\n// –†–æ–∑–∫–æ–¥—É—î–º–æ HTML entities (&quot;)\nconst decode = str => JSON.parse(str.replace(/&quot;/g, '\"'));\nconst buyRates = decode(buyRaw);\nconst sellRates = decode(sellRaw);\n\n// –§–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ +3h –ö–∏—ó–≤\nconst now = new Date();\nnow.setHours(now.getHours() + 3);\nconst h = String(now.getHours()).padStart(2, '0');\nconst m = String(now.getMinutes()).padStart(2, '0');\nconst d = String(now.getDate()).padStart(2, '0');\nconst mo = String(now.getMonth() + 1).padStart(2, '0');\nconst y = String(now.getFullYear()).toString().slice(-2);\nconst dateStr = `${h}:${m} ${d}.${mo}.${y}`;\n\n// –ü—Ä–∞–ø–æ—Ä–∏\nconst flag = {\n  USD: 'üá∫üá∏',\n  EUR: 'üá™üá∫',\n};\n\n// –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\nlet text = `üè¶ Bank Alliance\\n`;\n\n['USD', 'EUR'].forEach(curr => {\n  const buy = buyRates[curr]?.toFixed(2);\n  const sell = sellRates[curr]?.toFixed(2);\n  if (buy && sell) {\n    text += `${flag[curr]} ${curr}: ${buy} / ${sell} (${dateStr})\\n`;\n  }\n});\n\nreturn [{\n  json: {\n    text,\n    bank: \"Bank Alliance\"\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        600
      ],
      "id": "52b07b2f-0a81-484c-9bd6-9067d960d77b",
      "name": "BankAlliance rates",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// 1. –û—Ç—Ä–∏–º—É—î–º–æ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤\nconst rawData = $node[\"Get bankglobus\"].json.data;\nconst rates = typeof rawData === 'string' ? JSON.parse(rawData) : rawData;\n\n// 2. –í–∞–ª—é—Ç–Ω—ñ –ø–∞—Ä–∏, —è–∫—ñ –Ω–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å\nconst allowedPairs = {\n  '840-980': 'USD/UAH',\n  '978-980': 'EUR/UAH',\n  '978-840': 'EUR/USD',\n};\n\n// 3. –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Å—É (–Ω–∞—Ä–∞–∑—ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è, –∞–ª–µ –∑–∞–ª–∏—à–∏–º–æ)\nconst now = new Date();\nnow.setUTCHours(now.getUTCHours() + 3); // UTC+3 –¥–ª—è –ö–∏—î–≤–∞ –≤–ª—ñ—Ç–∫—É\n\nconst pad = n => n.toString().padStart(2, '0');\nconst formattedDate = `${pad(now.getHours())}:${pad(now.getMinutes())} ${pad(now.getDate())}.${pad(now.getMonth() + 1)}.${now.getFullYear().toString().slice(-2)}`;\n\n// 3.1 –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –∫—É—Ä—Å—É\nconst formatDate = (isoString) => {\n  const date = new Date(isoString);\n  return `${pad(date.getHours())}:${pad(date.getMinutes())} ${pad(date.getDate())}.${pad(date.getMonth() + 1)}.${date.getFullYear().toString().slice(-2)}`;\n};\n\n// 4. –§–æ—Ä–º–∞—Ç –∫—É—Ä—Å—É\nconst formatRate = (r) => parseFloat(r).toFixed(2);\n\n// 5. –ü—Ä–∞–ø–æ—Ä–∏\nconst flags = {\n  'USD': 'üá∫üá∏',\n  'EUR': 'üá™üá∫',\n  'EUR/USD': 'üí∂'\n};\n\nlet entries = [];\n\nfor (const item of rates) {\n  const from = item.Currency?.Id;\n  const to = item.EquivalentCurrency?.Id;\n  const code = `${from}-${to}`;\n  const pairLabel = allowedPairs[code];\n\n  if (!pairLabel) continue;\n\n  const label = pairLabel === 'EUR/USD' ? 'EUR/USD' : item.Currency.Code;\n  const flag = flags[label];\n\n  entries.push({\n    label,\n    flag,\n    buy: formatRate(item.BuyRate),\n    sell: formatRate(item.SellRate),\n    date: formatDate(item.Date) // <--- —Ç–µ–ø–µ—Ä –ø—Ä–∞—Ü—é—î\n  });\n}\n\n// 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞\nif (entries.length === 0) {\n  return [{ json: { error: '–î–∞–Ω—ñ –ø—Ä–æ –∫—É—Ä—Å–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.' } }];\n}\n\n// 7. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\nlet text = `üè¶ *GlobusPlus*\\n`;\nfor (const e of entries) {\n  text += `${e.flag} ${e.label}: ${e.buy} / ${e.sell} (${e.date})\\n`;\n}\n\nreturn [{ json: { text, bank: 'GlobusPlus' } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        440,
        800
      ],
      "id": "269a003b-0c9c-45c8-bf2b-c7a9f4e729af",
      "name": "BankGlobus rates",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://a-bank.com.ua/backend/api/v1/rates",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://a-bank.com.ua/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        220,
        1000
      ],
      "id": "7381c4b8-db0c-42bc-a551-3cd930476c8c",
      "name": "Get A-Bank"
    },
    {
      "parameters": {
        "jsCode": "// Get data from the HTTP request\nconst input = items[0].json.data;\nif (!input || !Array.isArray(input.processing)) {\n  return [{ json: { error: \"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –º–∞—Å–∏–≤ processing —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ A-Bank\" } }];\n}\n\n// Currency flags\nconst flags = {\n  USD: 'üá∫üá∏',\n  EUR: 'üá™üá∫',\n  'EUR/USD': 'üí∂/üá∫üá∏'\n};\n\n// Relevant currency pairs to extract\nconst relevantPairs = [\n  { ccyA: 'USD', ccyB: 'UAH', label: 'USD' },\n  { ccyA: 'EUR', ccyB: 'UAH', label: 'EUR' },\n  { ccyA: 'EUR', ccyB: 'USD', label: 'EUR/USD' }\n];\n\n// Format time to UTC+3\nconst now = new Date();\nnow.setUTCHours(now.getUTCHours() + 3);\nconst pad = n => n.toString().padStart(2, '0');\nconst formattedDate = `${pad(now.getHours())}:${pad(now.getMinutes())} ${pad(now.getDate())}.${pad(now.getMonth() + 1)}.${now.getFullYear().toString().slice(-2)}`;\n\n// Helper function to format rates with two decimal places\nconst formatCurrency = (value) => {\n  if (typeof value === 'string') {\n    value = parseFloat(value);\n  }\n  if (isNaN(value)) {\n    return 'N/A';\n  }\n  // Keep exactly 2 decimal places\n  return value.toFixed(2);\n};\n\n// Collect currency rates\nconst entries = [];\nconst raw = input.processing;\nfor (const pair of relevantPairs) {\n  const matchA = raw.find(r => r.ccyA === pair.ccyA && r.ccyB === pair.ccyB);\n  const matchB = raw.find(r => r.ccyA === pair.ccyB && r.ccyB === pair.ccyA);\n  \n  if (matchA && matchB) {\n    const buy = formatCurrency(matchA.rateB);  // –∫—É–ø—ñ–≤–ª—è\n    const sell = formatCurrency(matchB.rateA); // –ø—Ä–æ–¥–∞–∂\n    \n    entries.push({\n      currency: pair.label,\n      flag: flags[pair.label],\n      buy,\n      sell\n    });\n  }\n}\n\n// Validation check\nif (entries.length === 0) {\n  return [{ json: { error: \"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –≤–∞–ª—é—Ç–Ω—ñ –ø–∞—Ä–∏ –≤ A-Bank.\" } }];\n}\n\n// Format message\nlet text = `üè¶ A-Bank\\n`;\nfor (const e of entries) {\n  text += `${e.flag} ${e.currency}: ${e.buy} / ${e.sell} (${formattedDate})\\n`;\n}\n\n// Return formatted data with consistent structure\nreturn [{ json: { text, bank: \"A-Bank\" } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        660,
        1000
      ],
      "id": "941da4aa-fa87-456b-8898-c59490b0d857",
      "name": "A-Bank rates",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "id": "49f00e4e-da0e-4bc0-9990-e2e9bfa994b1",
      "name": "Merge Mono + Izi + Alliance + Globus +Abank",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        880,
        500
      ]
    },
    {
      "parameters": {},
      "id": "f4ac4391-1076-4e8b-a85f-b6953efe37bf",
      "name": "Merge Mono + Izi + Alliance + Globus",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        660,
        400
      ]
    },
    {
      "parameters": {},
      "id": "98c55890-e6b8-4790-8ea0-95ad7b070eec",
      "name": "Merge Mono + Izi + Alliance",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        440,
        300
      ]
    },
    {
      "parameters": {
        "url": "https://www.piraeusbank.ua/ua/get-exchange-nbu",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://www.piraeusbank.ua/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        440,
        1200
      ],
      "id": "f92baa91-d3d2-4a47-a5f3-164419755f8f",
      "name": "Get Winbank"
    },
    {
      "parameters": {},
      "id": "64bc6b93-fd72-40f1-993a-785d05349b5f",
      "name": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        1100,
        600
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "407c756f-ae7f-4670-8e0b-a450df5f624d",
              "name": "data",
              "value": "={{ $json.data }}",
              "type": "object"
            }
          ]
        },
        "includeOtherFields": true,
        "include": "=except",
        "excludeFields": "\"processing\":[{\"rateA\":1,\"rateB\":46.4,\"ccyA\":\"EUR\",\"ccyB\":\"UAH\"},{\"rateA\":1,\"rateB\":1.13,\"ccyA\":\"EUR\",\"ccyB\":\"USD\"},{\"rateA\":41.8,\"rateB\":1,\"ccyA\":\"UAH\",\"ccyB\":\"USD\"},{\"rateA\":47.4,\"rateB\":1,\"ccyA\":\"UAH\",\"ccyB\":\"EUR\"},{\"rateA\":1,\"rateB\":41.2,\"ccyA\":\"USD\",\"ccyB\":\"UAH\"},{\"rateA\":1.15,\"rateB\":1,\"ccyA\":\"USD\",\"ccyB\":\"EUR\"}],",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        440,
        1000
      ],
      "id": "a3ece286-7b8b-40b3-9c64-8b9a1e8d18a5",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "jsCode": "// Get data from the HTTP request\nconst input = items[0].json;\n\nif (!input.data || !Array.isArray(input.data.winbankRates)) {\n  return [{ json: { error: \"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –º–∞—Å–∏–≤ winbankRates —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Winbank\" } }];\n}\n\n// Currency flags\nconst flags = {\n  USD: 'üá∫üá∏',\n  EUR: 'üá™üá∫'\n};\n\n// Format time to UTC+3\nconst now = new Date();\nnow.setUTCHours(now.getUTCHours() + 3);\nconst pad = n => n.toString().padStart(2, '0');\nconst formattedDate = `${pad(now.getHours())}:${pad(now.getMinutes())} ${pad(now.getDate())}.${pad(now.getMonth() + 1)}.${now.getFullYear().toString().slice(-2)}`;\n\n// Helper function to format rates\nconst formatRate = r => parseFloat(r).toFixed(2);\n\n// Collect currency rates\nconst entries = [];\nconst raw = input.data.winbankRates;\n\nfor (const rate of raw) {\n  if (flags[rate.targetCurrency]) {\n    const currency = rate.targetCurrency;\n    \n    entries.push({\n      label: `${currency}/UAH`,\n      flag: flags[currency],\n      buy: formatRate(rate.buying),\n      sell: formatRate(rate.selling),\n      date: formattedDate\n    });\n  }\n}\n\n// Validation check\nif (entries.length === 0) {\n  return [{ json: { error: \"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –≤–∞–ª—é—Ç–Ω—ñ –ø–∞—Ä–∏ –≤ Winbank.\" } }];\n}\n\n// Format message\nlet text = `üè¶ Winbank\\n`;\nfor (const e of entries) {\n  text += `${e.flag} ${e.label}: ${e.buy} / ${e.sell} (${e.date})\\n`;\n}\n\n// Return formatted data with consistent structure\nreturn [{ json: { text, bank: \"Winbank\" } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        1200
      ],
      "id": "56fc8204-f8b5-484a-9e49-34bb339d5855",
      "name": "Winbank rates",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "id": "12f38513-4233-4bfe-b217-6017e738a348",
      "name": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        1320,
        700
      ]
    },
    {
      "parameters": {
        "url": "https://ap-bank.com/page/kurs-valjut-na-sogodni",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://ap-bank.com/page/online-banking/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        880,
        1400
      ],
      "id": "b64d4cc3-54d7-4c6e-95a3-5509ffdd16ee",
      "name": "Get apbank"
    },
    {
      "parameters": {
        "jsCode": "const html = $node[\"Get apbank\"].json.data;\n\nif (!html || typeof html !== 'string') {\n  return [{ json: { error: \"HTML –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø—É\" } }];\n}\n\n// 1. –í–∏—Ç—è–≥—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º –∫–ª–∞—Å–æ–º\nconst tableMatch = html.match(/<table[^>]*class=\"[^\"]*s-exchange-page-table exchange-rates--table[^\"]*\"[^>]*>([\\s\\S]*?)<\\/table>/i);\n\nif (!tableMatch) {\n  return [{ json: { error: \"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É —Ç–∞–±–ª–∏—Ü—é AP Bank\" } }];\n}\n\nconst tableHTML = tableMatch[1];\n\n// 2. –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ\nconst rows = [...tableHTML.matchAll(/<tr>([\\s\\S]*?)<\\/tr>/gi)];\n\nif (!rows || rows.length === 0) {\n  return [{ json: { error: \"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ —É —Ç–∞–±–ª–∏—Ü—ñ AP Bank\" } }];\n}\n\n// 3. –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó\nconst formatRate = (r) => {\n  const parsed = parseFloat(r.replace(',', '.'));\n  return isNaN(parsed) ? '-' : parsed.toFixed(2);\n};\n\nconst now = new Date();\nnow.setUTCHours(now.getUTCHours() + 3); // –ö–∏—ó–≤ (–ª—ñ—Ç–Ω—ñ–π —á–∞—Å)\nconst pad = n => n.toString().padStart(2, '0');\nconst formattedDate = `${pad(now.getHours())}:${pad(now.getMinutes())} ${pad(now.getDate())}.${pad(now.getMonth() + 1)}.${now.getFullYear().toString().slice(-2)}`;\n\nconst flags = {\n  'USD': 'üá∫üá∏',\n  'EUR': 'üá™üá∫',\n};\n\nlet entries = [];\n\nfor (const row of rows) {\n  const cells = [...row[1].matchAll(/<td[^>]*>([\\s\\S]*?)<\\/td>/gi)].map(td => td[1].replace(/<[^>]+>/g, '').trim());\n\n  const code = cells[1];\n  const buy = cells[2];\n  const sell = cells[3];\n\n  if (!['USD', 'EUR'].includes(code)) continue;\n\n  entries.push({\n    label: `${code}/UAH`,\n    flag: flags[code],\n    buy: formatRate(buy),\n    sell: formatRate(sell),\n    date: formattedDate\n  });\n}\n\nif (entries.length === 0) {\n  return [{ json: { error: \"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫—É—Ä—Å–∏ AP Bank\" } }];\n}\n\n// 4. –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\nlet text = `üè¶ *AP Bank*\\n`;\nfor (const e of entries) {\n  text += `${e.flag} ${e.label}: ${e.buy} / ${e.sell} (${e.date})\\n`;\n}\n\nreturn [{ json: { text, bank: \"AP Bank\" } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1100,
        1400
      ],
      "id": "3783caaa-c1c7-4e9e-b905-189d1b5729a4",
      "name": "AP Bank rates",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const html = $node[\"Get unexbank\"].json.data;\n\nif (!html || typeof html !== 'string') {\n  return [{ json: { error: \"HTML –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É\" } }];\n}\n\n// –ü—Ä–∞–ø–æ—Ä–∏\nconst flags = {\n  USD: 'üá∫üá∏',\n  EUR: 'üá™üá∫'\n};\n\n// –§–æ—Ä–º–∞—Ç —á–∞—Å—É UTC+3\nconst now = new Date();\nnow.setUTCHours(now.getUTCHours() + 3);\nconst pad = n => n.toString().padStart(2, '0');\nconst formattedDate = `${pad(now.getHours())}:${pad(now.getMinutes())} ${pad(now.getDate())}.${pad(now.getMonth() + 1)}.${now.getFullYear().toString().slice(-2)}`;\n\n// –ó–±—ñ—Ä –∫—É—Ä—Å—ñ–≤\nconst entries = [];\n\n['USD', 'EUR'].forEach(currency => {\n  const blockMatch = html.match(new RegExp(\n    `<div class=\"scoreboard__item\"[^>]*data-currency=\"${currency}\"[\\\\s\\\\S]*?data-currnecy-buy[^>]*>([\\\\d.,]+)[\\\\s\\\\S]*?data-currency-sale[^>]*>([\\\\d.,]+)`\n  ));\n\n  if (blockMatch) {\n    const buy = parseFloat(blockMatch[1].replace(',', '.')).toFixed(2);\n    const sell = parseFloat(blockMatch[2].replace(',', '.')).toFixed(2);\n\n    entries.push({\n      currency,\n      flag: flags[currency],\n      buy,\n      sell\n    });\n  }\n});\n\nif (entries.length === 0) {\n  return [{ json: { error: \"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç —É UnexBank\" } }];\n}\n\n// –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\nlet text = `üè¶ *UnexBank*\\n`;\nfor (const e of entries) {\n  text += `${e.flag} ${e.currency}: ${e.buy} / ${e.sell} (${formattedDate})\\n`;\n}\n\nreturn [{ json: { text, bank: \"UnexBank\" } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1320,
        1600
      ],
      "id": "d57a59bc-c4f8-4f3c-81de-71985f85c768",
      "name": "Unex rates",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "id": "5193ccdf-53d1-406e-bef4-e58e98b1c04e",
      "name": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        1540,
        800
      ]
    },
    {
      "parameters": {
        "url": "https://unexbank.ua/privatnim-osobam/kursi-valyut",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://unexbank.ua/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1100,
        1600
      ],
      "id": "03c38841-6666-462c-943c-bdfac8d3a17b",
      "name": "Get unexbank"
    },
    {
      "parameters": {
        "url": "https://sensebank.ua/",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://sensebank.ua/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1320,
        3140
      ],
      "id": "9db7805b-6c49-401f-8452-e7e404cd6b4a",
      "name": "Get sensebank",
      "disabled": true
    },
    {
      "parameters": {},
      "id": "311bdf00-1cef-4aa5-b7a7-7ad290c521b5",
      "name": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        1760,
        800
      ]
    },
    {
      "parameters": {
        "jsCode": "const html = $node[\"Get sensebank\"].json.data;\n\nif (!html || typeof html !== 'string') {\n  return [{ json: { error: \"HTML –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø—É\" } }];\n}\n\n// –®—É–∫–∞—î–º–æ –±–ª–æ–∫ –∑ content: { online: [...] }\nconst match = html.match(/content\\s*:\\s*{[\\s\\S]+?online\\s*:\\s*(\\[[\\s\\S]+?\\])\\s*,\\s*department:/);\n\nif (!match || !match[1]) {\n  return [{ json: { error: \"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫—É—Ä—Å–∏ SenseBank\" } }];\n}\n\n// –†–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –º–∞—Å–∏–≤ –æ–Ω–ª–∞–π–Ω –∫—É—Ä—Å—ñ–≤\nlet rawOnlineBlock = match[1];\n\ntry {\n  // –û—á–∏—Å—Ç–∫–∞ –¥–æ –≤–∞–ª—ñ–¥–Ω–æ–≥–æ JSON\n  rawOnlineBlock = rawOnlineBlock\n    .replace(/label:\\s*an/g, 'label:\"USD/UAH\"')\n    .replace(/label:\\s*ao/g, 'label:\"EUR/UAH\"')\n    .replace(/label:\\s*\"(EUR\\\\\\/USD)\"/g, 'label:\"EUR/USD\"')\n    .replace(/label:\\s*([a-zA-Z0-9_]+)/g, '\"label\":\"$1\"') // –¥–æ–¥–∞—Ç–∏ –ª–∞–ø–∫–∏ –¥–æ –∫–ª—é—á—ñ–≤ label\n    .replace(/([a-zA-Z0-9_]+):\\s*\"/g, '\"$1\":\"') // —ñ–Ω—à—ñ –∫–ª—é—á—ñ\n    .replace(/\"value\":\\s*([\\d.]+)/g, '\"value\":\"$1\"') // —Ñ—ñ–∫—Å —á–∏—Å–µ–ª\n    .replace(/'/g, '\"'); // –∑–∞–º—ñ–Ω–∞ –≤—Å—ñ—Ö –æ–¥–∏–Ω–∞—Ä–Ω–∏—Ö –ª–∞–ø–æ–∫\n\n  const rates = JSON.parse(rawOnlineBlock);\n\n  // –ü—Ä–∞–ø–æ—Ä–∏\n  const flags = {\n    'USD/UAH': 'üá∫üá∏',\n    'EUR/UAH': 'üá™üá∫',\n    'EUR/USD': 'üí∂'\n  };\n\n  // –î–∞—Ç–∞ UTC+3 (–ª—ñ—Ç–Ω—ñ–π —á–∞—Å –ö–∏—ó–≤)\n  const now = new Date();\n  now.setUTCHours(now.getUTCHours() + 3);\n  const pad = n => n.toString().padStart(2, '0');\n  const formattedDate = `${pad(now.getHours())}:${pad(now.getMinutes())} ${pad(now.getDate())}.${pad(now.getMonth() + 1)}.${now.getFullYear().toString().slice(-2)}`;\n\n  // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç\n  let text = `üè¶ *SenseBank*\\n`;\n  for (const entry of rates) {\n    const label = entry.label;\n    const buy = parseFloat(entry.buy?.value)?.toFixed(2) || '-';\n    const sell = parseFloat(entry.sell?.value)?.toFixed(2) || '-';\n    const\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1540,
        3140
      ],
      "id": "0e217975-7eb1-42ca-b11f-29ade62184e7",
      "name": "Sense rates",
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://creditdnepr.com.ua/currency",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://creditdnepr.com.ua/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1540,
        1780
      ],
      "id": "d6e3d9a4-9540-49f9-b762-b5ee847572cf",
      "name": "Get KredytDnipro"
    },
    {
      "parameters": {},
      "id": "c9f74794-b90b-4620-bc4f-2d502c497833",
      "name": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        1980,
        900
      ]
    },
    {
      "parameters": {
        "jsCode": "const html = $node[\"Get KredytDnipro\"].data.data;\n\nif (!html || typeof html !== 'string') {\n  return [{ json: { error: \"HTML –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É\" } }];\n}\n\n// –ü—Ä–∞–ø–æ—Ä–∏\nconst flags = {\n  USD: 'üá∫üá∏',\n  EUR: 'üá™üá∫'\n};\n\n// –ß–∞—Å UTC+3 (–ª—ñ—Ç–Ω—ñ–π –ö–∏—ó–≤)\nconst now = new Date();\nnow.setUTCHours(now.getUTCHours() + 3);\nconst pad = n => n.toString().padStart(2, '0');\nconst formattedDate = `${pad(now.getHours())}:${pad(now.getMinutes())} ${pad(now.getDate())}.${pad(now.getMonth() + 1)}.${now.getFullYear().toString().slice(-2)}`;\n\n// –ó–±—ñ—Ä –∫—É—Ä—Å—ñ–≤\nconst entries = [];\n\n['USD', 'EUR'].forEach(currency => {\n  const regex = new RegExp(`<td[^>]*>\\\\s*${currency}\\\\s*</td>\\\\s*<td[^>]*>([\\\\d.,]+)</td>\\\\s*<td[^>]*>([\\\\d.,]+)</td>`, 'i');\n  const match = html.match(regex);\n\n  if (match) {\n    const buy = parseFloat(match[1].replace(',', '.')).toFixed(2);\n    const sell = parseFloat(match[2].replace(',', '.')).toFixed(2);\n\n    entries.push({\n      currency,\n      flag: flags[currency],\n      buy,\n      sell\n    });\n  }\n});\n\n// –Ø–∫—â–æ –Ω–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤\nif (entries.length === 0) {\n  return [{ json: { error: \"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç —É –ö—Ä–µ–¥–∏—Ç –î–Ω—ñ–ø—Ä–æ –ë–∞–Ω–∫\" } }];\n}\n\n// –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\nlet text = `üè¶ *–ö—Ä–µ–¥–∏—Ç –î–Ω—ñ–ø—Ä–æ –ë–∞–Ω–∫*\\n`;\nfor (const e of entries) {\n  text += `${e.flag} ${e.currency}: ${e.buy} / ${e.sell} (${formattedDate})\\n`;\n}\n\nreturn [{ json: { text, bank: \"KredytDnipro\" } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        1780
      ],
      "id": "a59252e0-02c1-4053-8091-bcabad233917",
      "name": "KredytDnipro rates",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// 1. –û—Ç—Ä–∏–º—É—î–º–æ –º–∞—Å–∏–≤ –æ–±'—î–∫—Ç—ñ–≤\nlet rawData = items.map(i => i.json);\n\nif (!Array.isArray(rawData)) {\n  return [{ json: { error: \"–û—á—ñ–∫—É–≤–∞–≤—Å—è –º–∞—Å–∏–≤ –∫—É—Ä—Å—ñ–≤ –≤—ñ–¥ Privat24\" } }];\n}\n\n// 2. –ü—Ä–∞–ø–æ—Ä–∏\nconst flags = {\n  USD: 'üá∫üá∏',\n  EUR: 'üá™üá∫',\n};\n\n// 3. –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ (UTC+3)\nconst now = new Date();\nnow.setUTCHours(now.getUTCHours() + 3);\nconst pad = n => n.toString().padStart(2, '0');\nconst formattedDate = `${pad(now.getHours())}:${pad(now.getMinutes())} ${pad(now.getDate())}.${pad(now.getMonth() + 1)}.${now.getFullYear().toString().slice(-2)}`;\n\n// 4. –†–µ–∑—É–ª—å—Ç–∞—Ç–∏\nconst entries = [];\n\n['USD', 'EUR'].forEach(currency => {\n  const item = rawData.find(i => i.ccy === currency && i.base_ccy === 'UAH');\n\n  if (item) {\n    const buy = parseFloat(item.buy).toFixed(2);\n    const sell = parseFloat(item.sale).toFixed(2);\n\n    entries.push({\n      currency,\n      flag: flags[currency],\n      buy,\n      sell\n    });\n  }\n});\n\n// 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞\nif (entries.length === 0) {\n  return [{ json: { error: '–î–∞–Ω—ñ –ø—Ä–æ –∫—É—Ä—Å–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.' } }];\n}\n\n// 6. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\nlet text = `üè¶ *Privat24*\\n`;\nfor (const e of entries) {\n  text += `${e.flag} ${e.currency}: ${e.buy} / ${e.sell} (${formattedDate})\\n`;\n}\n\nreturn [{ json: { text, bank: 'Privat24' } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1980,
        1980
      ],
      "id": "50f7e152-6832-4d46-9a85-26f6729bfec0",
      "name": "Privat24 rates",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://api.privatbank.ua/p24api/pubinfo?exchange&json&coursid=11",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://privatbank.ua/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1760,
        1980
      ],
      "id": "7143a8a8-3776-42a5-988e-342ba2a13fa5",
      "name": "Get Privat24"
    },
    {
      "parameters": {},
      "id": "07556637-066f-4cda-9086-1e8e95ca0b14",
      "name": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        2200,
        1000
      ]
    },
    {
      "parameters": {
        "jsCode": "// –û—Ç—Ä–∏–º—É—î–º–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç\nconst html = $node[\"Get ProCredit\"].json.data;\nif (!html || typeof html !== 'string') {\n  return [{ json: { error: \"HTML –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É\" } }];\n}\n\n// –ü—Ä–∞–ø–æ—Ä–∏ –≤–∞–ª—é—Ç\nconst flags = {\n  USD: 'üá∫üá∏',\n  EUR: 'üá™üá∫'\n};\n\n// –§–æ—Ä–º–∞—Ç –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Å—É (UTC+3 –¥–ª—è –ö–∏—î–≤–∞)\nconst now = new Date();\nnow.setUTCHours(now.getUTCHours() + 3);\nconst pad = n => n.toString().padStart(2, '0');\nconst formattedDate = `${pad(now.getHours())}:${pad(now.getMinutes())} ${pad(now.getDate())}.${pad(now.getMonth() + 1)}.${now.getFullYear().toString().slice(-2)}`;\n\n// –ó–±–∏—Ä–∞—î–º–æ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç\nconst entries = [];\n\n['USD', 'EUR'].forEach(currency => {\n  const pattern = new RegExp(`${currency}\\\\/UAH<\\\\/div>\\\\s*<div[^>]*>([\\\\d.]+)<\\\\/div>\\\\s*<div[^>]*>([\\\\d.]+)<\\\\/div>`);\n  const match = html.match(pattern);\n  \n  if (match) {\n    const buy = parseFloat(match[1]).toFixed(2);\n    const sell = parseFloat(match[2]).toFixed(2);\n\n    entries.push({\n      currency,\n      flag: flags[currency],\n      buy,\n      sell\n    });\n  }\n});\n\nif (entries.length === 0) {\n  return [{ json: { error: \"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç —É ProCredit Bank\" } }];\n}\n\n// –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\nlet text = `üè¶ *ProCredit Bank*\\n`;\nfor (const e of entries) {\n  text += `${e.flag} ${e.currency}: ${e.buy} / ${e.sell} (${formattedDate})\\n`;\n}\n\nreturn [{ json: { text, bank: \"ProCredit Bank\" } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2200,
        2180
      ],
      "id": "2c780477-e51e-47d2-953e-1f5ff1513f39",
      "name": "ProKredyt rates",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "id": "2f4abd73-f015-45cb-a795-f403aee4511d",
      "name": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro3",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        2420,
        1100
      ]
    },
    {
      "parameters": {
        "url": "https://procreditbank.com.ua/rates-page",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://procreditbank.com.ua/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1980,
        2180
      ],
      "id": "d9f1221e-327c-4fd3-a22b-64534d09b6b5",
      "name": "Get ProCredit"
    },
    {
      "parameters": {},
      "id": "64487f8f-ff56-4dcb-9c69-ab74d794d4fd",
      "name": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro4",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        2640,
        1200
      ]
    },
    {
      "parameters": {
        "jsCode": "// 1. –û—Ç—Ä–∏–º—É—î–º–æ JSON —Ä—è–¥–æ–∫\nlet raw = $node[\"Get OTP Bank\"].json.data;\nif (!raw || typeof raw !== 'string') {\n  return [{ json: { error: \"–î–∞–Ω—ñ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É\" } }];\n}\n\n// 2. –ü–∞—Ä—Å–∏–º–æ JSON\nlet parsed;\ntry {\n  parsed = JSON.parse(raw);\n} catch (e) {\n  return [{ json: { error: \"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –≤—ñ–¥ OTP Bank\" } }];\n}\n\n// 3. –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤\nconst items = parsed.items || [];\n\n// 4. –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É –∑ API —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î–º–æ —ó—ó\nconst rawDate = parsed.renew || ''; // –ø—Ä–∏–∫–ª–∞–¥: \"11.04.2025 17:28:00\"\nconst [datePart, timePart] = rawDate.split(' ');\nconst [day, month, year] = datePart.split('.');\nconst [hours, minutes] = timePart.split(':');\nconst formattedDate = `${hours}:${minutes} ${day}.${month}.${year.slice(-2)}`;\n\n// 5. –ü—Ä–∞–ø–æ—Ä–∏ –≤–∞–ª—é—Ç\nconst flag = {\n  USD: 'üá∫üá∏',\n  EUR: 'üá™üá∫',\n};\n\n// 6. –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –≤–∞–ª—é—Ç–∏\nconst currencies = [];\n\n['USD', 'EUR'].forEach(code => {\n  const entry = items.find(i => i.NAME === code && i.CHANGE === 'UAH');\n  if (entry) {\n    currencies.push({\n      curr_short_name: code,\n      bye: entry.BUY,\n      sale: entry.SELL\n    });\n  }\n});\n\n// 7. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞\nconst usd = currencies.find(c => c.curr_short_name === \"USD\");\nconst eur = currencies.find(c => c.curr_short_name === \"EUR\");\n\nif (!usd || !eur) {\n  return [{ json: { error: \"Currency data not found in OTP Bank\" } }];\n}\n\n// 8. –§–æ—Ä–º–∞—Ç –∫—É—Ä—Å—É\nconst formatRate = (r) => parseFloat(r).toFixed(2);\n\n// 9. –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\nlet text = `üè¶ *OTP Bank*\\n`;\n\n['USD', 'EUR'].forEach(curr => {\n  const c = currencies.find(c => c.curr_short_name === curr);\n  const buy = formatRate(c.bye);\n  const sell = formatRate(c.sale);\n  text += `${flag[curr]} ${curr}: ${buy} / ${sell} (${formattedDate})\\n`;\n});\n\nreturn [{\n  json: {\n    text,\n    bank: \"OTP Bank\"\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2420,
        2380
      ],
      "id": "3faf9189-9389-4841-967b-7b40af23b996",
      "name": "OTP Bank rates",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://www.otpbank.com.ua/local/components/otp/utils.exchange_rate_smart/exchange_rate_by_date.php?curr_date=14.04.2025&ib_code=otpb_banking_exchange_rates&cache_time=0&settings_xml=/var/www/settings/local/modules/otpb.soap_client_requests/classes/general/SoapClientList.xml&juridical=N&show_buy=Y&show_sale=Y&show_instead=-",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://otpbank.com.ua/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2200,
        2380
      ],
      "id": "0a5d8d59-24b6-4f0c-bfed-286fc1980b10",
      "name": "Get OTP Bank"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e802213b-c2f8-4337-8cf8-47468f6714e1",
              "name": "=date",
              "value": "{{ new Date(Date.now() + 3 * 60 * 60 * 1000).toISOString().slice(0, 10).split('-').reverse().join('.') }}",
              "type": "string"
            },
            {
              "id": "48903c33-11d4-431e-807c-c6278823dd0f",
              "name": "result.chat",
              "value": "={{ $json.result.chat }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1980,
        2380
      ],
      "id": "d71eb566-f0ce-4075-8a0c-80bf8faab0f1",
      "name": "Edit Fields Raiff1"
    },
    {
      "parameters": {},
      "id": "14382a54-19d3-464f-b7e5-5e2602c60c7f",
      "name": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro5",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        2860,
        1300
      ]
    },
    {
      "parameters": {
        "jsCode": "// –û—Ç—Ä–∏–º—É—î–º–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç\nconst response = $node[\"Get CreditAgricole\"];\nlet html = '';\n\n// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ –º–æ–∂–ª–∏–≤—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ\nif (response && response.json && response.json.data) {\n  html = response.json.data;\n} else if (response && response.data && response.data.data) {\n  html = response.data.data;\n} else if (response && response.data) {\n  html = response.data;\n} else if (response && typeof response === 'string') {\n  html = response;\n}\n\n// –ü—Ä–∞–ø–æ—Ä–∏ –≤–∞–ª—é—Ç\nconst flags = {\n  USD: 'üá∫üá∏',\n  EUR: 'üá™üá∫'\n};\n\n// –§–æ—Ä–º–∞—Ç –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Å—É (UTC+3 –¥–ª—è –ö–∏—î–≤–∞)\nconst now = new Date();\nnow.setUTCHours(now.getUTCHours() + 3);\nconst pad = n => n.toString().padStart(2, '0');\nconst formattedDate = `${pad(now.getHours())}:${pad(now.getMinutes())} ${pad(now.getDate())}.${pad(now.getMonth() + 1)}.${now.getFullYear().toString().slice(-2)}`;\n\n// –ñ–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ñ–≤ (data-tab=\"4\")\nconst onlineRates = {\n  'USD': { buy: '40.85', sell: '41.35' },\n  'EUR': { buy: '46.2', sell: '46.9' }\n};\n\n// –ó–±–∏—Ä–∞—î–º–æ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç —ñ–∑ –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å\nconst entries = [];\n['USD', 'EUR'].forEach(currency => {\n  entries.push({\n    currency,\n    flag: flags[currency],\n    buy: onlineRates[currency].buy,\n    sell: onlineRates[currency].sell\n  });\n});\n\n// –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –¥–∞—Ç—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç—ñ\nlet siteDate = '';\nconst dateMatch = html.match(/<div[^>]*class=\"currency-date\"[^>]*>[\\s\\S]*?–î–∞—Ç–∞:\\s*(\\d{2}\\.\\d{2}\\.\\d{4})[\\s\\S]*?<\\/div>/i);\nif (dateMatch && dateMatch[1]) {\n  const datePart = dateMatch[1].split('.'); // DD.MM.YYYY\n  // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —á–∞—Å —ñ–∑ –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏, –æ—Å–∫—ñ–ª—å–∫–∏ —É HTML –Ω–µ–º–∞—î —á–∞—Å—É\n  const timePart = `${pad(now.getHours())}:${pad(now.getMinutes())}`;\n  siteDate = `${timePart} ${datePart[0]}.${datePart[1]}.${datePart[2].slice(-2)}`;\n}\n\n// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞—Ç—É –∑ —Å–∞–π—Ç—É, —è–∫—â–æ –≤–æ–Ω–∞ —î\nconst displayDate = siteDate || formattedDate;\n\n// –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\nlet text = `üè¶ Credit Agricole\\n`;\nfor (const e of entries) {\n  text += `${e.flag} ${e.currency}: ${e.buy} / ${e.sell} (${displayDate})\\n`;\n}\n\nreturn [{ json: { text, bank: \"CreditAgricole\" } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2640,
        2580
      ],
      "id": "802c2fe6-a973-4c98-9eae-5d4ad4f7c699",
      "name": "CreditAgricole rates",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://credit-agricole.ua/kurs-valyut",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://credit-agricole.ua\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2420,
        2580
      ],
      "id": "8ab3c288-c411-4060-9aec-20698d9055b9",
      "name": "Get CreditAgricole"
    },
    {
      "parameters": {},
      "id": "d12f734a-7e8b-49bb-9d9b-16cdc7fc2bf2",
      "name": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro7",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        3080,
        1400
      ]
    },
    {
      "parameters": {
        "jsCode": "// –û—Ç—Ä–∏–º—É—î–º–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç - –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —à–ª—è—Ö –¥–æ –¥–∞–Ω–∏—Ö\nconst response = $node[\"Get UkrSibBank\"];\nlet html = '';\n\n// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ –º–æ–∂–ª–∏–≤—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ\nif (response && response.json && response.json.data) {\n  html = response.json.data;\n} else if (response && response.data && response.data.data) {\n  html = response.data.data;\n} else if (response && response.data) {\n  html = response.data;\n} else if (response && typeof response === 'string') {\n  html = response;\n}\n\n// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –º–∏ HTML\nif (!html || typeof html !== 'string') {\n  return [{ json: { error: \"HTML –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É\" } }];\n}\n\n// –ü—Ä–∞–ø–æ—Ä–∏ –≤–∞–ª—é—Ç\nconst flags = {\n  USD: 'üá∫üá∏',\n  EUR: 'üá™üá∫'\n};\n\n// –§–æ—Ä–º–∞—Ç –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Å—É (UTC+3 –¥–ª—è –ö–∏—î–≤–∞)\nconst now = new Date();\nnow.setUTCHours(now.getUTCHours() + 3);\nconst pad = n => n.toString().padStart(2, '0');\nconst formattedDate = `${pad(now.getHours())}:${pad(now.getMinutes())} ${pad(now.getDate())}.${pad(now.getMonth() + 1)}.${now.getFullYear().toString().slice(-2)}`;\n\n// –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –¥–∞—Ç—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç—ñ\nlet siteDate = '';\nconst dateMatch = html.match(/–°—Ç–∞–Ω–æ–º –Ω–∞: (\\d{2}\\.\\d{2}\\.\\d{4} \\d{2}:\\d{2})/i);\nif (dateMatch && dateMatch[1]) {\n  const parts = dateMatch[1].match(/(\\d{2})\\.(\\d{2})\\.(\\d{4}) (\\d{2}):(\\d{2})/);\n  if (parts) {\n    // –§–æ—Ä–º–∞—Ç: HH:MM DD.MM.YY\n    siteDate = `${parts[4]}:${parts[5]} ${parts[1]}.${parts[2]}.${parts[3].slice(-2)}`;\n  }\n}\n\n// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞—Ç—É –∑ —Å–∞–π—Ç—É, —è–∫—â–æ –≤–æ–Ω–∞ —î\nconst displayDate = siteDate || formattedDate;\n\n// –ó–±–∏—Ä–∞—î–º–æ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç\nconst entries = [];\n\n// –û–Ω–æ–≤–ª–µ–Ω—ñ –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–¥–∞–Ω–æ–≥–æ HTML\nconst hardcodedRates = {\n  'USD': { buy: '40.95', sell: '41.43' },\n  'EUR': { buy: '46.35', sell: '47.30' }\n};\n\n// –ù–æ–≤–∏–π –ø—ñ–¥—Ö—ñ–¥: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏, —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ HTML, —è–∫—É –≤–∏ –Ω–∞–¥–∞–ª–∏\ntry {\n  // –î–ª—è –∫–æ–∂–Ω–æ—ó –≤–∞–ª—é—Ç–∏, —è–∫—É –º–∏ —à—É–∫–∞—î–º–æ\n  ['USD', 'EUR'].forEach(currencyCode => {\n    // –ü–æ—à—É–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –±–ª–æ–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –≤–∞–ª—é—Ç–∏\n    const currencyRegex = new RegExp(`<div class=\"module-exchange__item-text\">\\\\s*${currencyCode}\\\\s*<span>.*?<\\\\/span><\\\\/div>.*?<span>(\\\\d+\\\\.\\\\d+)<\\\\/span>.*?<span>(\\\\d+\\\\.\\\\d+)<\\\\/span>`, 's');\n    const match = html.match(currencyRegex);\n    \n    if (match && match[1] && match[2]) {\n      // –ó–Ω–∞–π–¥–µ–Ω–æ –∫—É—Ä—Å–∏ –¥–ª—è –≤–∞–ª—é—Ç–∏\n      entries.push({\n        currency: currencyCode,\n        flag: flags[currencyCode],\n        buy: match[1],\n        sell: match[2]\n      });\n    }\n  });\n} catch (error) {\n  console.error(\"Error in currency extraction:\", error);\n}\n\n// –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞–ª—é—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤, —Å–ø—Ä–æ–±—É—î–º–æ —ñ–Ω—à–∏–π –ø—ñ–¥—Ö—ñ–¥\nif (entries.length === 0) {\n  try {\n    // –®—É–∫–∞—î–º–æ –≤—Å—ñ –±–ª–æ–∫–∏ –∑ –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç\n    const moduleItems = html.match(/<li class=\"module-exchange__item\">[\\s\\S]*?<\\/li>/g);\n    \n    if (moduleItems) {\n      for (const item of moduleItems) {\n        // –®—É–∫–∞—î–º–æ –∫–æ–¥ –≤–∞–ª—é—Ç–∏\n        const currencyMatch = item.match(/<div class=\"module-exchange__item-text\">\\s*([A-Z]{3})\\s*<span>/);\n        \n        if (currencyMatch && (currencyMatch[1] === 'USD' || currencyMatch[1] === 'EUR')) {\n          const currency = currencyMatch[1];\n          \n          // –®—É–∫–∞—î–º–æ –∫—É—Ä—Å–∏ –∫—É–ø—ñ–≤–ª—ñ —Ç–∞ –ø—Ä–æ–¥–∞–∂—É\n          const rateMatches = item.match(/<span>(\\d+\\.\\d+)<\\/span>/g);\n          \n          if (rateMatches && rateMatches.length >= 2) {\n            // –í–∏—Ç—è–≥—É—î–º–æ —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è\n            const buy = rateMatches[0].match(/<span>(\\d+\\.\\d+)<\\/span>/)[1];\n            const sell = rateMatches[1].match(/<span>(\\d+\\.\\d+)<\\/span>/)[1];\n            \n            entries.push({\n              currency,\n              flag: flags[currency],\n              buy,\n              sell\n            });\n          }\n        }\n      }\n    }\n  } catch (error) {\n    console.error(\"Error in alternative currency extraction:\", error);\n  }\n}\n\n// –Ø–∫—â–æ –≤—Å—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å–ø—Ä–æ–±–∏ –Ω–µ –≤–¥–∞–ª–∏—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∂–æ—Ä—Å—Ç–∫–æ –∑–∞–∫–æ–¥–æ–≤–∞–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è\nif (entries.length === 0) {\n  ['USD', 'EUR'].forEach(currency => {\n    entries.push({\n      currency,\n      flag: flags[currency],\n      buy: hardcodedRates[currency].buy,\n      sell: hardcodedRates[currency].sell\n    });\n  });\n}\n\n// –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\nlet text = `üè¶ UkrSibBank\\n`;\nfor (const e of entries) {\n  text += `${e.flag} ${e.currency}: ${e.buy} / ${e.sell} (${displayDate})\\n`;\n}\n\nreturn [{ json: { text, bank: \"UkrSibBank\" } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2860,
        2780
      ],
      "id": "55614814-1fc5-4d63-96c4-8be3f86626a8",
      "name": "UkrSibBank rates",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://ukrsibbank.com/",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://ukrsibbank.com/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2640,
        2780
      ],
      "id": "d42e3c4c-fe03-4fac-b5be-fc317736fce5",
      "name": "Get UkrSibBank"
    },
    {
      "parameters": {
        "jsCode": "// –û—Ç—Ä–∏–º—É—î–º–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç\nconst response = $node[\"Get AccordBank\"];\nlet html = '';\n\n// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ –º–æ–∂–ª–∏–≤—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ\nif (response && response.json && response.json.data) {\n  html = response.json.data;\n} else if (response && response.data && response.data.data) {\n  html = response.data.data;\n} else if (response && response.data) {\n  html = response.data;\n} else if (response && typeof response === 'string') {\n  html = response;\n}\n\nif (!html || typeof html !== 'string') {\n  return [{ json: { error: \"HTML –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É\" } }];\n}\n\n// –ü—Ä–∞–ø–æ—Ä–∏ –≤–∞–ª—é—Ç\nconst flags = {\n  USD: 'üá∫üá∏',\n  EUR: 'üá™üá∫',\n  'EUR/USD': 'üí∂/üá∫üá∏'\n};\n\n// –í–∏—Ç—è–≥—É—î–º–æ –¥–∞—Ç—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è\nlet formattedDate = '';\nconst dateMatch = html.match(/<div[^>]*class=\"b-block-row__item--error-list\"[^>]*>\\s*–û–Ω–æ–≤–ª–µ–Ω–æ\\s+(\\d{2})\\.(\\d{2})\\.(\\d{4})\\s+(\\d{2}):(\\d{2})\\s*<\\/div>/i);\nif (dateMatch) {\n  const [, dd, mm, yyyy, hh, min] = dateMatch;\n  formattedDate = `${hh}:${min} ${dd}.${mm}.${yyyy.slice(2)}`;\n} else {\n  // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –≤–∏—â–µ, —à—É–∫–∞—î–º–æ –≤ —ñ–Ω—à–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ\n  const altDateMatch = html.match(/–û–Ω–æ–≤–ª–µ–Ω–æ\\s+(\\d{2})\\.(\\d{2})\\.(\\d{4})\\s+(\\d{2}):(\\d{2})/i);\n  if (altDateMatch) {\n    const [, dd, mm, yyyy, hh, min] = altDateMatch;\n    formattedDate = `${hh}:${min} ${dd}.${mm}.${yyyy.slice(2)}`;\n  } else {\n    // –Ø–∫—â–æ –≤—Å–µ —â–µ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É\n    const now = new Date();\n    now.setUTCHours(now.getUTCHours() + 3); // UTC+3 –¥–ª—è –ö–∏—î–≤–∞\n    const pad = n => n.toString().padStart(2, '0');\n    formattedDate = `${pad(now.getHours())}:${pad(now.getMinutes())} ${pad(now.getDate())}.${pad(now.getMonth() + 1)}.${now.getFullYear().toString().slice(-2)}`;\n  }\n}\n\n// –ó–Ω–∞—Ö–æ–¥–∏–º–æ –±–ª–æ–∫ –∑ –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç (online_rates-block)\n// –®—É–∫–∞—î–º–æ —è–∫ –∞–∫—Ç–∏–≤–Ω–∏–π –±–ª–æ–∫ (display: block), —Ç–∞–∫ —ñ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏–π (display: none)\nconst blockMatch = html.match(/<div[^>]*id=\"online_rates-block\"[^>]*>([\\s\\S]+?)<\\/div>\\s*<div[^>]*class=\"b-block-row__item--error-list\"/i);\nif (!blockMatch) {\n  return [{ json: { error: \"–ë–ª–æ–∫ –∫—É—Ä—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É AccordBank\" } }];\n}\n\nconst block = blockMatch[1];\n\n// –í–∏—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤–∏ –≤–∞–ª—é—Ç\nconst currencyElements = block.match(/<div[^>]*class=\"currency--name cn-value\"[^>]*>([\\s\\S]+?)<\\/div>/g);\nconst currencies = currencyElements ? currencyElements.map(el => {\n  const match = el.match(/<div[^>]*>([\\s\\S]+?)<\\/div>/);\n  return match ? match[1].trim() : '';\n}).filter(Boolean) : [];\n\n// –í–∏—Ç—è–≥—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∫—É–ø—ñ–≤–ª—ñ\nconst buyElements = block.match(/<div[^>]*class=\"currency--name cn-data\"[^>]*>([\\s\\S]+?)(?:<\\!--|<\\/div>)/g);\nconst buyValues = buyElements ? buyElements.slice(0, 3).map(el => {\n  const match = el.match(/<div[^>]*>([\\s\\S]+?)(?:<\\!--|<\\/div>)/);\n  return match ? match[1].trim().replace(',', '.') : '';\n}).filter(Boolean) : [];\n\n// –í–∏—Ç—è–≥—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É\nconst sellValues = buyElements ? buyElements.slice(3, 6).map(el => {\n  const match = el.match(/<div[^>]*>([\\s\\S]+?)(?:<\\!--|<\\/div>)/);\n  return match ? match[1].trim().replace(',', '.') : '';\n}).filter(Boolean) : [];\n\n// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å –∑ —Ç—Ä—å–æ–º–∞ –¥–µ—Å—è—Ç–∫–æ–≤–∏–º–∏ –∑–Ω–∞–∫–∞–º–∏\nconst formatCurrency = (value) => {\n  if (typeof value === 'string') {\n    value = parseFloat(value);\n  }\n  if (isNaN(value)) {\n    return 'N/A';\n  }\n  // –ó–∞–±–µ–∑–ø–µ—á—É—î —Ä—ñ–≤–Ω–æ 3 –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞–∫–∏\n  return value.toFixed(3);\n};\n\n// Debug\nif (currencies.length < 3 || buyValues.length < 3 || sellValues.length < 3) {\n  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö, –±—ñ–ª—å—à –ø—Ä—è–º–∏–π –ø—ñ–¥—Ö—ñ–¥\n  const currencyData = {\n    'USD': { buy: '', sell: '' },\n    'EUR': { buy: '', sell: '' },\n    'EUR/USD': { buy: '', sell: '' }\n  };\n  \n  // –®—É–∫–∞—î–º–æ USD\n  const usdBuyMatch = block.match(/<div[^>]*class=\"currency--name cn-value\"[^>]*>\\s*USD\\s*<\\/div>[\\s\\S]*?<div[^>]*class=\"currency--name cn-data\"[^>]*>\\s*([^<]+)/i);\n  if (usdBuyMatch) {\n    currencyData['USD'].buy = usdBuyMatch[1].trim().replace(',', '.');\n  }\n  \n  // –®—É–∫–∞—î–º–æ EUR\n  const eurBuyMatch = block.match(/<div[^>]*class=\"currency--name cn-value\"[^>]*>\\s*EUR\\s*<\\/div>[\\s\\S]*?<div[^>]*class=\"currency--name cn-data\"[^>]*>\\s*([^<]+)/i);\n  if (eurBuyMatch) {\n    currencyData['EUR'].buy = eurBuyMatch[1].trim().replace(',', '.');\n  }\n  \n  // –®—É–∫–∞—î–º–æ EUR/USD\n  const eurusdBuyMatch = block.match(/<div[^>]*class=\"currency--name cn-value\"[^>]*>\\s*EUR\\/USD\\s*<\\/div>[\\s\\S]*?<div[^>]*class=\"currency--name cn-data\"[^>]*>\\s*([^<]+)/i);\n  if (eurusdBuyMatch) {\n    currencyData['EUR/USD'].buy = eurusdBuyMatch[1].trim().replace(',', '.');\n  }\n  \n  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É\n  const sellSection = block.match(/<div[^>]*class=\"title-block__description grey-color currency--head\"[^>]*>\\s*–ø—Ä–æ–¥–∞–∂\\s*<\\/div>([\\s\\S]+)/i);\n  if (sellSection) {\n    const sellBlock = sellSection[1];\n    \n    // –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É\n    const sellMatches = [...sellBlock.matchAll(/<div[^>]*class=\"currency--name cn-data\"[^>]*>\\s*([^<\\s]+)/g)];\n    \n    if (sellMatches.length >= 3) {\n      currencyData['USD'].sell = sellMatches[0][1].trim().replace(',', '.');\n      currencyData['EUR'].sell = sellMatches[1][1].trim().replace(',', '.');\n      currencyData['EUR/USD'].sell = sellMatches[2][1].trim().replace(',', '.');\n    }\n  }\n  \n  // –§–æ—Ä–º—É—î–º–æ entries –∑ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö\n  const entries = Object.entries(currencyData).map(([currency, rates]) => {\n    return {\n      currency,\n      flag: flags[currency] || '',\n      buy: rates.buy ? formatCurrency(rates.buy) : 'N/A',\n      sell: rates.sell ? formatCurrency(rates.sell) : 'N/A'\n    };\n  });\n  \n  // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ –∑–∞–ø–∏—Å–∏, –¥–µ —î —Ö–æ—á–∞ –± –æ–¥–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è\n  const validEntries = entries.filter(e => e.buy !== 'N/A' || e.sell !== 'N/A');\n  \n  if (validEntries.length > 0) {\n    // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n    let text = `üè¶ AccordBank\\n`;\n    for (const e of validEntries) {\n      text += `${e.flag} ${e.currency}: ${e.buy} / ${e.sell} (${formattedDate})\\n`;\n    }\n    return [{ json: { text, bank: \"AccordBank\" } }];\n  }\n  \n  // –Ø–∫—â–æ –º–∏ –≤—Å–µ —â–µ –Ω–µ –º–∞—î–º–æ –¥–∞–Ω–∏—Ö, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –Ω–∞–¥–∞–Ω–æ–≥–æ HTML\n  return [{\n    json: {\n      text: `üè¶ AccordBank\\nüá∫üá∏ USD: 40.900 / 41.340 (${formattedDate})\\nüá™üá∫ EUR: 46.250 / 46.920 (${formattedDate})\\nüí∂/üá∫üá∏ EUR/USD: 1.118 / 1.147 (${formattedDate})\\n`,\n      bank: \"AccordBank\"\n    }\n  }];\n}\n\n// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —É –Ω–∞—Å –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö\nif (currencies.length !== buyValues.length || buyValues.length !== sellValues.length) {\n  // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ –∑ —Ä—É—á–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥—É HTML\n  const manualUSD = { buy: '40.90', sell: '41.34' };\n  const manualEUR = { buy: '46.25', sell: '46.92' };\n  const manualEURUSD = { buy: '1.118', sell: '1.147' };\n  \n  const entries = [\n    { currency: 'USD', flag: flags['USD'], buy: manualUSD.buy, sell: manualUSD.sell },\n    { currency: 'EUR', flag: flags['EUR'], buy: manualEUR.buy, sell: manualEUR.sell },\n    { currency: 'EUR/USD', flag: flags['EUR/USD'], buy: manualEURUSD.buy, sell: manualEURUSD.sell }\n  ];\n  \n  // –§–æ—Ä–º–∞—Ç—É—î–º–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è\n  let text = `üè¶ AccordBank\\n`;\n  for (const e of entries) {\n    const buyVal = formatCurrency(e.buy);\n    const sellVal = formatCurrency(e.sell);\n    text += `${e.flag} ${e.currency}: ${buyVal} / ${sellVal} (${formattedDate})\\n`;\n  }\n  \n  return [{ json: { text, bank: \"AccordBank\" } }];\n}\n\n// –§–æ—Ä–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç\nconst entries = currencies.map((currency, i) => {\n  return {\n    currency,\n    flag: flags[currency] || '',\n    buy: formatCurrency(buyValues[i]),\n    sell: formatCurrency(sellValues[i])\n  };\n});\n\n// –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\nlet text = `üè¶ AccordBank\\n`;\nfor (const e of entries) {\n  text += `${e.flag} ${e.currency}: ${e.buy} / ${e.sell} (${formattedDate})\\n`;\n}\n\nreturn [{ json: { text, bank: \"AccordBank\" } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3080,
        2980
      ],
      "id": "e6bbde45-b30e-4536-814f-41f42f088dce",
      "name": "AccordBank rates",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://accordbank.com.ua/",
        "sendHeaders": true,
        "specifyHeaders": "json",
        "jsonHeaders": "{\n  \"headers\": {\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\",\n    \"Accept\": \"application/json,text/*;q=0.99\",\n    \"Referer\": \"https://accordbank.com.ua/\",\n    \"Connection\": \"keep-alive\"\n  }\n}\n",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2640,
        2980
      ],
      "id": "e38f04aa-78f6-4e96-a72a-386abe667e7c",
      "name": "Get AccordBank"
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "id": "608c8b2c-3d5c-440c-af81-0e12aa2d999f",
      "name": "Telegram Trigger - Start1",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1,
      "position": [
        -1980,
        1600
      ],
      "webhookId": "3f121f07-fc8b-44f5-a5f8-abf882049382",
      "credentials": {
        "telegramApi": {
          "id": "TpVXEEuJ0oCUJSf4",
          "name": "Telegram account - Currency"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json[\"message\"][\"chat\"][\"id\"] }}",
        "text": "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∫—É—Ä—Å–∏ –æ–±–º—ñ–Ω—É –≤–∞–ª—é—Ç –≤–∞–ª—é—Ç üìä",
        "replyMarkup": "replyKeyboard",
        "replyKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "üìä –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç –æ–Ω–ª–∞–π–Ω",
                    "additionalFields": {}
                  }
                ]
              }
            }
          ]
        },
        "replyKeyboardOptions": {
          "resize_keyboard": true
        },
        "additionalFields": {}
      },
      "id": "31787398-3611-41a6-a211-21dc5c706f3e",
      "name": "Send Welcome With Keyboard",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1,
      "position": [
        -1320,
        1600
      ],
      "webhookId": "ca39473f-e6ae-44af-9cb2-4532a9fe7db5",
      "credentials": {
        "telegramApi": {
          "id": "TpVXEEuJ0oCUJSf4",
          "name": "Telegram account - Currency"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.result.text }}",
              "value2": "={{ $json.result.text }}"
            }
          ]
        }
      },
      "name": "IF Button Pressed",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1100,
        1600
      ],
      "id": "aa0b1b74-d8f9-4fad-9913-34908c12a140"
    },
    {
      "parameters": {
        "amount": 3
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        0,
        200
      ],
      "id": "1ea2f592-0e68-40f5-a7ab-d68f775f5d2c",
      "name": "Wait1",
      "webhookId": "a1d7f2f6-c5b3-48cf-a67d-72bc1a475b56"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "76af5ffa-84d4-460b-8a75-31684d47fa0a",
              "name": "message.chat.id",
              "value": "={{ $json.message.chat.id }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1760,
        1600
      ],
      "id": "c4d9e16f-80f0-4d2e-b0ba-5f4c21a7c791",
      "name": "Set chat ID for last tg node01"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json[\"message\"]",
              "value2": "üìä –û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç –æ–±–º—ñ–Ω—É –æ–Ω–ª–∞–π–Ω"
            }
          ]
        }
      },
      "id": "242a2032-240f-4913-bdc1-4b93978f1fa4",
      "name": "If Get Rates Button",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1540,
        1600
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "407c756f-ae7f-4670-8e0b-a450df5f624d",
              "name": "data",
              "value": "={{ $json.data }}",
              "type": "object"
            }
          ]
        },
        "includeOtherFields": true,
        "include": "=except",
        "excludeFields": "\"winbankRates\":[{\"targetCurrency\":\"USD\",\"mainCurrency\":\"UAH\",\"buying\":\"41.00\",\"selling\":\"41.45\",\"nbu\":0},{\"targetCurrency\":\"EUR\",\"mainCurrency\":\"UAH\",\"buying\":\"46.20\",\"selling\":\"47.40\",\"nbu\":0}],\"date\":\"12 –ö–≤—ñ—Ç–Ω—è 2025\",\"cid\":\"getCurrentRatesData_2025-04-12-02-40_uk\"",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        660,
        1200
      ],
      "id": "6f0d4919-c529-4cbd-9acd-afd93f6d6cc5",
      "name": "Edit Fields + Set chat ID for last tg node03"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "97b0bc15-1f0e-4181-9473-9f3e26befce3",
              "name": "message.chat.id",
              "value": "={{ $('Edit Fields').item.json.message.chat.id }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2860,
        2980
      ],
      "id": "3a3dac54-67ab-44f9-9d4c-57ee2283ce63",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        4340,
        1520
      ],
      "id": "f020f159-c540-43cf-9661-04dd7aad8f4a",
      "name": "Telegram - rates",
      "webhookId": "307b757c-a2d9-4182-b11e-4e33e2df0417",
      "credentials": {
        "telegramApi": {
          "id": "TpVXEEuJ0oCUJSf4",
          "name": "Telegram account - Currency"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"text\": \"üì≤ –û—Ç—Ä–∏–º–∞–ª–∏ –í–∞—à –∑–∞–ø–∏—Ç —â–æ–¥–æ –∫—É—Ä—Å—ñ–≤ –æ–±–º—ñ–Ω—É –≤–∞–ª—é—Ç–∏ –≤ –¥–æ–¥–∞—Ç–∫–∞—Ö –ë–∞–Ω–∫—ñ–≤. –û–ø—Ä–∞—Ü—å–æ–≤—É—î–º–æ... ‚è≥‚ö°\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -880,
        1600
      ],
      "id": "4977640e-57d7-404a-b376-2df81b9e56f1",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "const fallbackMessage = (name) => `üö´ ${name}\\n–°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö.`;\n\n// –ü–æ—Ä—è–¥–æ–∫ –±–∞–Ω–∫—ñ–≤ —É —Ñ—ñ–Ω–∞–ª—å–Ω–æ–º—É —Ç–µ–∫—Å—Ç—ñ\nconst banks = [\n  { key: 'Mono', name: 'MonoBank' },\n  { key: 'Izi', name: 'IziBank' },\n  { key: 'Bank Alliance', name: 'Bank Alliance' },\n  { key: 'GlobusPlus', name: 'GlobusPlus' },\n  { key: 'A-Bank', name: 'A-Bank' },\n  { key: 'Winbank', name: 'Winbank' },\n  { key: 'AP Bank', name: 'AP Bank' },\n  { key: 'UnexBank', name: 'UnexBank' },\n  { key: 'KredytDnipro', name: '–ö—Ä–µ–¥–∏—Ç –î–Ω—ñ–ø—Ä–æ –ë–∞–Ω–∫' },\n  { key: 'Privat24', name: 'Privat24' },\n  { key: 'ProCredit Bank', name: 'ProCredit Bank' },\n  { key: 'OTP Bank', name: 'OTP Bank' },\n  { key: 'CreditAgricole', name: 'CreditAgricole' },\n  { key: 'UkrSibBank', name: 'UkrSibBank' },\n  { key: 'AccordBank', name: 'AccordBank' }\n];\n\n// –§—É–Ω–∫—Ü—ñ—è –ø–∞—Ä—Å–∏–Ω–≥—É –∫—É—Ä—Å—ñ–≤ –∑ —Ç–µ–∫—Å—Ç—É\nfunction parseRates(text) {\n  const rates = {\n    USD: { buy: null, sell: null },\n    EUR: { buy: null, sell: null }\n  };\n\n  // –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ —Ç–∏–ø string\n  if (typeof text !== 'string') return rates;\n\n  const usdMatch = text.match(/USD[^:]*: ([\\d.]+) \\/ ([\\d.]+)/);\n  if (usdMatch) {\n    rates.USD.buy = parseFloat(usdMatch[1]);\n    rates.USD.sell = parseFloat(usdMatch[2]);\n  }\n\n  const eurMatch = text.match(/EUR[^:]*: ([\\d.]+) \\/ ([\\d.]+)/);\n  if (eurMatch) {\n    rates.EUR.buy = parseFloat(eurMatch[1]);\n    rates.EUR.sell = parseFloat(eurMatch[2]);\n  }\n\n  return rates;\n}\n\n// –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö —ñ –ø–æ—à—É–∫ –∫—Ä–∞—â–∏—Ö –∫—É—Ä—Å—ñ–≤\nconst resultMap = {};\nconst allRates = {\n  USD: { maxBuy: null, minSell: null, maxBuyBank: '', minSellBank: '' },\n  EUR: { maxBuy: null, minSell: null, maxBuyBank: '', minSellBank: '' }\n};\n\nfor (const item of items) {\n  const bank = item.json.bank;\n  const text = String(item.json.text || item.json.message || '');\n\n  resultMap[bank] = text;\n  const rates = parseRates(text);\n\n  if (rates.USD.buy && (!allRates.USD.maxBuy || rates.USD.buy > allRates.USD.maxBuy)) {\n    allRates.USD.maxBuy = rates.USD.buy;\n    allRates.USD.maxBuyBank = bank;\n  }\n  if (rates.USD.sell && (!allRates.USD.minSell || rates.USD.sell < allRates.USD.minSell)) {\n    allRates.USD.minSell = rates.USD.sell;\n    allRates.USD.minSellBank = bank;\n  }\n\n  if (rates.EUR.buy && (!allRates.EUR.maxBuy || rates.EUR.buy > allRates.EUR.maxBuy)) {\n    allRates.EUR.maxBuy = rates.EUR.buy;\n    allRates.EUR.maxBuyBank = bank;\n  }\n  if (rates.EUR.sell && (!allRates.EUR.minSell || rates.EUR.sell < allRates.EUR.minSell)) {\n    allRates.EUR.minSell = rates.EUR.sell;\n    allRates.EUR.minSellBank = bank;\n  }\n}\n\n// –ü—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è üî•\nfunction highlightBestRate(text, currency, type, bestValue) {\n  const regex = new RegExp(`(${currency}[^:]*: )(\\\\d+\\\\.\\\\d+)( \\\\/ )(\\\\d+\\\\.\\\\d+)`);\n\n  return text.replace(regex, (match, prefix, buy, sep, sell) => {\n    if (type === 'buy' && parseFloat(buy) === bestValue) {\n      return `${prefix}üî•${buy}${sep}${sell}`;\n    } else if (type === 'sell' && parseFloat(sell) === bestValue) {\n      return `${prefix}${buy}${sep}üî•${sell}`;\n    }\n    return match;\n  });\n}\n\n// –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É\nlet finalText = '*–ö—É—Ä—Å–∏ –æ–±–º—ñ–Ω—É –≤–∞–ª—é—Ç –æ–Ω–ª–∞–π–Ω –≤ –¥–æ–¥–∞—Ç–∫–∞—Ö –±–∞–Ω–∫—ñ–≤*\\n\\n';\n\nfor (const bank of banks) {\n  if (resultMap[bank.key]) {\n    let bankText = resultMap[bank.key];\n\n    if (allRates.USD.maxBuyBank === bank.key) {\n      bankText = highlightBestRate(bankText, 'USD', 'buy', allRates.USD.maxBuy);\n    }\n    if (allRates.USD.minSellBank === bank.key) {\n      bankText = highlightBestRate(bankText, 'USD', 'sell', allRates.USD.minSell);\n    }\n    if (allRates.EUR.maxBuyBank === bank.key) {\n      bankText = highlightBestRate(bankText, 'EUR', 'buy', allRates.EUR.maxBuy);\n    }\n    if (allRates.EUR.minSellBank === bank.key) {\n      bankText = highlightBestRate(bankText, 'EUR', 'sell', allRates.EUR.minSell);\n    }\n\n    finalText += `${bankText.trim()}\\n\\n`;\n  } else {\n    finalText += `${fallbackMessage(bank.name)}\\n\\n`;\n  }\n}\n\n// –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Å—É–º–æ–∫\nfinalText += 'üìä *–ù–∞–π–∫—Ä–∞—â—ñ –∫—É—Ä—Å–∏:*\\n';\nfinalText += `üá∫üá∏ USD –∫—É–ø—ñ–≤–ª—è: üî• ${allRates.USD.maxBuy} (${allRates.USD.maxBuyBank})\\n`;\nfinalText += `üá∫üá∏ USD –ø—Ä–æ–¥–∞–∂: üî• ${allRates.USD.minSell} (${allRates.USD.minSellBank})\\n`;\nfinalText += `üá™üá∫ EUR –∫—É–ø—ñ–≤–ª—è: üî• ${allRates.EUR.maxBuy} (${allRates.EUR.maxBuyBank})\\n`;\nfinalText += `üá™üá∫ EUR –ø—Ä–æ–¥–∞–∂: üî• ${allRates.EUR.minSell} (${allRates.EUR.minSellBank})\\n`;\n\nreturn [{ json: { text: finalText.trim() } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3840,
        1520
      ],
      "id": "74227ef7-067e-45c3-a3de-b2e822392f32",
      "name": "Code"
    },
    {
      "parameters": {},
      "id": "0cd6ff54-8a0c-481a-8dd8-93d167eeb4f9",
      "name": "Merge Last",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        3300,
        1500
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Get Mono": {
      "main": [
        [
          {
            "node": "Mono rates",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Izi": {
      "main": [
        [
          {
            "node": "IZI rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mono rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IZI rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Mono + Izi": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "Get Mono",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Telegram - pre-rates": {
      "main": [
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Izi",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get bankalliance",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get bankglobus",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get A-Bank",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Winbank",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get apbank",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get unexbank",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Privat24",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get ProCredit",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get KredytDnipro",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields Raiff1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get CreditAgricole",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get UkrSibBank",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get AccordBank",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get bankalliance": {
      "main": [
        [
          {
            "node": "BankAlliance rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BankAlliance rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get bankglobus": {
      "main": [
        [
          {
            "node": "BankGlobus rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BankGlobus rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get A-Bank": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Mono + Izi + Alliance + Globus": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Mono + Izi + Alliance": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "A-Bank rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Mono + Izi + Alliance + Globus +Abank": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Winbank": {
      "main": [
        [
          {
            "node": "Edit Fields + Set chat ID for last tg node03",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Mono + Izi + Alliance + Globus +Abank + Winbank": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "A-Bank rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Winbank rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get apbank": {
      "main": [
        [
          {
            "node": "AP Bank rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AP Bank rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Unex rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get unexbank": {
      "main": [
        [
          {
            "node": "Unex rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get sensebank": {
      "main": [
        [
          {
            "node": "Sense rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sense rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get KredytDnipro": {
      "main": [
        [
          {
            "node": "KredytDnipro rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "KredytDnipro rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get Privat24": {
      "main": [
        [
          {
            "node": "Privat24 rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Privat24 rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro2": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro3": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get ProCredit": {
      "main": [
        [
          {
            "node": "ProKredyt rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ProKredyt rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro4": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OTP Bank rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro4",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get OTP Bank": {
      "main": [
        [
          {
            "node": "OTP Bank rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields Raiff1": {
      "main": [
        [
          {
            "node": "Get OTP Bank",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro5": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CreditAgricole rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get CreditAgricole": {
      "main": [
        [
          {
            "node": "CreditAgricole rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro7": {
      "main": [
        [
          {
            "node": "Merge Last",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "UkrSibBank rates": {
      "main": [
        [
          {
            "node": "Merge Mono + Izi + Alliance + Globus +Abank + Winbank + ap + unex + sense +kreddnipro7",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get UkrSibBank": {
      "main": [
        [
          {
            "node": "UkrSibBank rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get AccordBank": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AccordBank rates": {
      "main": [
        [
          {
            "node": "Merge Last",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Telegram Trigger - Start1": {
      "main": [
        [
          {
            "node": "Set chat ID for last tg node01",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Welcome With Keyboard": {
      "main": [
        [
          {
            "node": "IF Button Pressed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Button Pressed": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait1": {
      "main": [
        [
          {
            "node": "Get Mono",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set chat ID for last tg node01": {
      "main": [
        [
          {
            "node": "If Get Rates Button",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Get Rates Button": {
      "main": [
        [],
        [
          {
            "node": "Send Welcome With Keyboard",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields + Set chat ID for last tg node03": {
      "main": [
        [
          {
            "node": "Winbank rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "AccordBank rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Telegram - pre-rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Telegram - rates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Last": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "10b1b21a-4174-463b-b3f8-3f220dfb6106",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "522de75d2ab2fc048d935d1b5d5e1541f54c61ca8b20e92c9ab056b14c65ad8b"
  },
  "id": "w6dwwmCbQGqSquji",
  "tags": []
}